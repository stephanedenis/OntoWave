import os
from playwright.sync_api import expect
import pytest


BASE_URL = os.environ.get("BASE_URL", "http://127.0.0.1:8000").rstrip("/")

def _u(path: str) -> str:
    p = path.lstrip("#/")
    if p.startswith("http"):
        return p
    return f"{BASE_URL}/{p}"


class TestSuppressionRedondances:
    """Tests pour valider la suppression des redondances entre site principal et d√©mos"""
    
    def test_pas_de_fichier_index_racine(self):
        """V√©rifier que le fichier index.html redondant √† la racine a √©t√© supprim√©"""
        print('üßπ Test suppression du fichier index.html redondant √† la racine...')
        
        # V√©rifier qu'il n'y a plus de index.html √† la racine du projet
        root_index_path = "/home/stephane/GitHub/OntoWave/index.html"
        assert not os.path.exists(root_index_path), f"Le fichier {root_index_path} doit √™tre supprim√© pour √©viter la redondance"
        
        print('‚úÖ Fichier index.html redondant supprim√© de la racine')
    
    def test_separation_contenu_demos(self, page):
        """V√©rifier que les d√©mos ont un contenu distinct du site principal"""
        print('üßπ Test s√©paration du contenu entre site principal et d√©mos...')
        
        # Test 1: Charger la page principale
        page.goto(_u('/'))
        page.wait_for_timeout(4000)
        main_content = page.text_content('body')
        
        # V√©rifier que la page principale a son contenu attendu
        assert 'OntoWave.org' in main_content
        print('‚úÖ Page principale charg√©e')
        
        # Test 2: Charger la d√©mo minimale 
        page.goto(_u('/demo/minimal-demo.html'))
        page.wait_for_timeout(4000)
        minimal_content = page.text_content('body')
        
        # V√©rifier que la d√©mo a une configuration diff√©rente
        assert 'Minimal configuration' in minimal_content or 'English only' in minimal_content
        assert 'languageButtons: \'none\'' in minimal_content or 'No language buttons' in minimal_content
        print('‚úÖ D√©mo minimale a sa propre configuration')
        
        # Test 3: Charger la d√©mo avanc√©e
        page.goto(_u('/demo/advanced-demo.html'))  
        page.wait_for_timeout(4000)
        advanced_content = page.text_content('body')
        
        # V√©rifier que la d√©mo avanc√©e a sa configuration
        assert 'OntoWave v2.0' in advanced_content or 'Getting' in advanced_content
        print('‚úÖ D√©mo avanc√©e a sa propre configuration')
        
        # Test 4: V√©rifier qu'il n'y a pas de redondance de contenu principal
        # Les phrases sp√©cifiques au site principal ne doivent pas √™tre dans les d√©mos
        main_specific_content = [
            'JavaScript puissante',
            'Bas√© sur Markdown', 
            'Multilingue'
        ]
        
        for content in main_specific_content:
            # Ces contenus peuvent √™tre dans main_content mais pas dans les d√©mos
            if content in main_content:
                assert content not in minimal_content, f"Redondance d√©tect√©e: '{content}' du site principal ne doit pas √™tre dans la d√©mo minimale"
                assert content not in advanced_content, f"Redondance d√©tect√©e: '{content}' du site principal ne doit pas √™tre dans la d√©mo avanc√©e"
        
        print('‚úÖ Aucune redondance de contenu principal d√©tect√©e dans les d√©mos')
        
        # Test 5: V√©rifier que les d√©mos n'ont pas le m√™me contenu entre elles
        # Chaque d√©mo doit avoir ses propres sp√©cificit√©s
        assert minimal_content != advanced_content, "Les d√©mos minimale et avanc√©e ne doivent pas avoir le m√™me contenu"
        print('‚úÖ Les d√©mos ont des contenus distincts entre elles')
        
        print('üéâ Test de suppression des redondances valid√©!')
        
    def test_structure_fichiers_propre(self):
        """V√©rifier que la structure des fichiers est propre et sans redondance"""
        print('üßπ Test structure des fichiers...')
        
        # V√©rifier que les fichiers de d√©mo existent
        demo_files = [
            "/home/stephane/GitHub/OntoWave/docs/demo/minimal-demo.html",
            "/home/stephane/GitHub/OntoWave/docs/demo/advanced-demo.html",
            "/home/stephane/GitHub/OntoWave/docs/demo/minimal-content.md",
            "/home/stephane/GitHub/OntoWave/docs/demo/advanced-content.md"
        ]
        
        for file_path in demo_files:
            assert os.path.exists(file_path), f"Le fichier {file_path} doit exister"
        
        # V√©rifier que le index principal existe
        main_index = "/home/stephane/GitHub/OntoWave/docs/index.html"
        assert os.path.exists(main_index), f"Le fichier {main_index} doit exister"
        
        print('‚úÖ Structure des fichiers valid√©e')
        print('üéâ Tous les tests de structure passent!')
