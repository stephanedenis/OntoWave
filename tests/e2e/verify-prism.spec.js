import { test, expect } from '@playwright/test';

test('V√©rification du rendu Prism pour coloration syntaxique', async ({ page }) => {
  console.log('üß™ Test: V√©rification de la coloration syntaxique Prism...');
  
  await page.goto('http://localhost:8080');
  await page.waitForLoadState('networkidle');
  
  // Attendre que Prism se charge compl√®tement
  await page.waitForFunction(() => window.Prism !== undefined, { timeout: 15000 });
  console.log('‚úÖ Prism d√©tect√© comme charg√©');
  
  // Attendre un d√©lai suppl√©mentaire pour la coloration
  await page.waitForTimeout(3000);
  
  // Chercher le bloc de code HTML sp√©cifiquement
  const htmlCodeBlocks = await page.locator('code.language-html').all();
  console.log(`üìä Nombre de blocs HTML d√©tect√©s: ${htmlCodeBlocks.length}`);
  
  if (htmlCodeBlocks.length === 0) {
    console.log('‚ùå Aucun bloc de code HTML trouv√© avec la classe language-html');
    // V√©rifions s'il y a des blocs de code sans classe
    const allCodeBlocks = await page.locator('code').all();
    console.log(`üìä Nombre total de blocs code: ${allCodeBlocks.length}`);
    
    for (let i = 0; i < allCodeBlocks.length; i++) {
      const className = await allCodeBlocks[i].getAttribute('class');
      const textContent = await allCodeBlocks[i].textContent();
      console.log(`Code block ${i}: class="${className}", content preview: "${textContent?.substring(0, 50)}..."`);
    }
    
    throw new Error('Aucun bloc HTML avec classe language-html trouv√©');
  }
  
  // Prendre le premier bloc HTML
  const htmlBlock = htmlCodeBlocks[0];
  const htmlContent = await htmlBlock.textContent();
  console.log(`üìù Contenu HTML: ${htmlContent?.substring(0, 100)}...`);
  
  // V√©rifier la pr√©sence de tokens Prism
  const tokenElements = await htmlBlock.locator('.token').all();
  console.log(`üé® Nombre de tokens Prism trouv√©s: ${tokenElements.length}`);
  
  if (tokenElements.length === 0) {
    console.log('‚ùå Aucun token Prism trouv√© - la coloration syntaxique ne fonctionne pas');
    
    // Debug: v√©rifier les classes CSS pr√©sentes
    const className = await htmlBlock.getAttribute('class');
    console.log(`Debug: classe du bloc de code: "${className}"`);
    
    // V√©rifier si Prism a bien √©t√© appel√©
    const prismStatus = await page.evaluate(() => {
      return {
        prismExists: !!window.Prism,
        prismComponents: window.Prism ? Object.keys(window.Prism.languages || {}) : [],
        prismPlugins: window.Prism ? Object.keys(window.Prism.plugins || {}) : []
      };
    });
    console.log('üîç Status Prism:', JSON.stringify(prismStatus, null, 2));
    
    throw new Error('Coloration syntaxique Prism non appliqu√©e');
  }
  
  // V√©rifier des types de tokens sp√©cifiques pour HTML
  const tagTokens = await htmlBlock.locator('.token.tag').all();
  const punctuationTokens = await htmlBlock.locator('.token.punctuation').all();
  const attrNameTokens = await htmlBlock.locator('.token.attr-name').all();
  
  console.log(`üè∑Ô∏è  Tokens tag: ${tagTokens.length}`);
  console.log(`üî§ Tokens punctuation: ${punctuationTokens.length}`);
  console.log(`üìõ Tokens attr-name: ${attrNameTokens.length}`);
  
  // Au minimum, on devrait avoir des tags et de la ponctuation pour HTML
  expect(tagTokens.length).toBeGreaterThan(0);
  expect(punctuationTokens.length).toBeGreaterThan(0);
  
  console.log('‚úÖ Coloration syntaxique Prism fonctionne correctement pour HTML');
});
