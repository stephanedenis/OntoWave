import os
from playwright.sync_api import expect
import pytest


BASE_URL = os.environ.get("BASE_URL", "http://127.0.0.1:8000").rstrip("/")

def _u(path: str) -> str:
    p = path.lstrip("#/")
    if p.startswith("http"):
        return p
    return f"{BASE_URL}/{p}"


class TestSuppressionRedondances:
    """Tests pour valider la suppression des redondances entre site principal et d√©mos"""
    
    def test_contenu_specialise(self, page):
        """V√©rifier que chaque page a son contenu sp√©cialis√© sans redondance"""
        print('üßπ Test suppression des redondances entre site principal et d√©mos...')
        
        # Test 1: V√©rifier que la page principale a son contenu sp√©cifique
        page.goto(_u('/'))
        page.wait_for_timeout(3000)
        
        main_content = page.text_content('body')
        assert 'OntoWave.org' in main_content
        assert 'JavaScript puissante' in main_content or 'biblioth√®que' in main_content
        print('‚úÖ Page principale charg√©e')
        print('‚úÖ Contenu principal pr√©sent')
        
        # Test 2: V√©rifier que la d√©mo minimale a son contenu sp√©cialis√©
        page.goto(_u('/demo/minimal-demo.html'))
        
        # Attendre que OntoWave charge le contenu sp√©cifique
        try:
            page.wait_for_selector('body:has-text("D√©mo Minimale")', timeout=10000)
        except:
            # Si le titre n'appara√Æt pas, attendre que OntoWave soit au moins initialis√©
            page.wait_for_selector('body:has-text("OntoWave")', timeout=10000)
        
        page.wait_for_timeout(3000)  # Attendre le chargement complet
        
        minimal_content = page.text_content('body')
        
        # Debug: afficher le contenu r√©cup√©r√©
        print('=== CONTENU D√âMO MINIMALE ===')
        print(minimal_content[:500] + '...' if len(minimal_content) > 500 else minimal_content)
        print('=== FIN CONTENU ===')
        
        # La d√©mo minimale doit avoir son contenu sp√©cialis√©
        assert 'D√©mo Minimale' in minimal_content
        assert 'Configuration utilis√©e' in minimal_content
        assert 'Prochaine √©tape' in minimal_content
        print('‚úÖ Contenu sp√©cialis√© d√©mo minimale valid√©')
        
        # Test 3: V√©rifier que la d√©mo avanc√©e a son contenu sp√©cialis√©
        page.goto(_u('/demo/advanced-demo.html'))
        
        # Attendre que OntoWave charge le contenu
        page.wait_for_selector('body:has-text("OntoWave")', timeout=10000)
        page.wait_for_timeout(2000)  # Attendre le chargement complet
        
        advanced_content = page.text_content('body')
        
        # La d√©mo avanc√©e doit avoir son contenu sp√©cialis√©
        assert 'D√©mo Avanc√©e' in advanced_content
        assert 'interface MkDocs' in advanced_content
        assert 'fonctionnalit√©s avanc√©es' in advanced_content
        print('‚úÖ Contenu sp√©cialis√© d√©mo avanc√©e valid√©')
        
        # Test 4: V√©rifier qu'il n'y a pas de redondance
        # Le contenu principal ne doit pas appara√Ætre dans les d√©mos
        main_unique_phrases = [
            'JavaScript puissante',
            'Bas√© sur Markdown',
            'Multilingue'
        ]
        
        for phrase in main_unique_phrases:
            assert phrase not in minimal_content, f"Redondance d√©tect√©e: '{phrase}' ne doit pas √™tre dans la d√©mo minimale"
            assert phrase not in advanced_content, f"Redondance d√©tect√©e: '{phrase}' ne doit pas √™tre dans la d√©mo avanc√©e"
        
        print('‚úÖ Aucune redondance d√©tect√©e entre site principal et d√©mos')
        
        # Test 5: V√©rifier que chaque d√©mo a des configurations distinctes
        assert 'languageButtons: \'none\'' in minimal_content or 'No language buttons' in minimal_content
        assert 'English only' in minimal_content or 'anglais' in minimal_content.lower()
        
        print('‚úÖ Configurations distinctes valid√©es')
        print('üéâ Suppression des redondances confirm√©e!')
