const { test, expect } = require('@playwright/test');

/**
 * Tests exhaustifs pour toutes les d√©mos OntoWave
 * Valide : minimal-demo, advanced-demo, full-config avec leurs fonctionnalit√©s
 */

test.describe('üéÆ Tests D√©mos Compl√®tes OntoWave', () => {
  
  test('D√©mo minimale - Fonctionnement complet', async ({ page }) => {
    console.log('=== TEST D√âMO MINIMALE ===');
    
    await page.goto('http://localhost:8080/demo/minimal-demo.html');
    await page.waitForTimeout(3000);
    
    // V√©rifier le chargement de base
    await expect(page).toHaveTitle(/Minimal Demo/);
    console.log('‚úÖ Page d√©mo minimale charg√©e');
    
    // V√©rifier que OntoWave est charg√©
    const ontoWaveLoaded = await page.evaluate(() => window.OntoWave !== undefined);
    expect(ontoWaveLoaded).toBe(true);
    console.log('‚úÖ OntoWave charg√© dans d√©mo minimale');
    
    // V√©rifier le contenu rendu
    const contentPresent = await page.locator('h1, h2, h3').first().isVisible();
    expect(contentPresent).toBe(true);
    
    const titleText = await page.locator('h1').first().textContent();
    expect(titleText).toContain('OntoWave');
    console.log(`‚úÖ Titre d√©mo minimale: "${titleText}"`);
    
    // V√©rifier que le contenu markdown est rendu
    const paragraphs = await page.locator('p').count();
    expect(paragraphs).toBeGreaterThan(0);
    console.log(`‚úÖ ${paragraphs} paragraphes rendus`);
    
    // V√©rifier la configuration minimale
    const config = await page.evaluate(() => window.ontoWaveConfig);
    expect(config).toBeDefined();
    expect(config.locales).toContain('fr');
    console.log('‚úÖ Configuration minimale valide');
  });

  test('D√©mo avanc√©e - Fonctionnalit√©s √©tendues', async ({ page }) => {
    console.log('=== TEST D√âMO AVANC√âE ===');
    
    await page.goto('http://localhost:8080/demo/advanced-demo.html');
    await page.waitForTimeout(4000);
    
    // V√©rifier le chargement
    await expect(page).toHaveTitle(/Advanced Demo/);
    console.log('‚úÖ Page d√©mo avanc√©e charg√©e');
    
    // V√©rifier OntoWave avec fonctionnalit√©s avanc√©es
    const config = await page.evaluate(() => window.ontoWaveConfig);
    expect(config).toBeDefined();
    expect(config.locales.length).toBeGreaterThan(1);
    console.log(`‚úÖ Support multilingue: ${config.locales.join(', ')}`);
    
    // V√©rifier le contenu multilingue
    const mainContent = await page.textContent('body');
    expect(mainContent.length).toBeGreaterThan(500);
    console.log(`‚úÖ Contenu avanc√© rendu (${mainContent.length} caract√®res)`);
    
    // V√©rifier les boutons de langue si pr√©sents
    const langButtons = await page.locator('[onclick*="setLanguage"], [data-lang]').count();
    if (langButtons > 0) {
      console.log(`‚úÖ ${langButtons} boutons de langue disponibles`);
      
      // Tester le changement de langue
      const firstLangButton = page.locator('[onclick*="setLanguage"], [data-lang]').first();
      await firstLangButton.click();
      await page.waitForTimeout(2000);
      console.log('‚úÖ Changement de langue test√©');
    }
    
    // V√©rifier les styles MkDocs-like mentionn√©s
    const styledElements = await page.locator('[class*="md-"], [class*="mkdocs"], .content').count();
    console.log(`‚úÖ ${styledElements} √©l√©ments styl√©s d√©tect√©s`);
  });

  test('D√©mo configuration compl√®te - Toutes fonctionnalit√©s', async ({ page }) => {
    console.log('=== TEST D√âMO CONFIGURATION COMPL√àTE ===');
    
    await page.goto('http://localhost:8080/demo/full-config.html');
    await page.waitForTimeout(4000);
    
    // V√©rifier le chargement
    const title = await page.title();
    expect(title.length).toBeGreaterThan(0);
    console.log(`‚úÖ Page full-config charg√©e: "${title}"`);
    
    // V√©rifier la configuration compl√®te
    const config = await page.evaluate(() => window.ontoWaveConfig);
    expect(config).toBeDefined();
    console.log('‚úÖ Configuration compl√®te pr√©sente');
    
    // V√©rifier les fonctionnalit√©s activ√©es
    const features = [];
    if (config.enablePrism) features.push('Prism');
    if (config.enableMermaid) features.push('Mermaid');
    if (config.enablePlantUML) features.push('PlantUML');
    if (config.enableSearch) features.push('Search');
    
    console.log(`‚úÖ Fonctionnalit√©s activ√©es: ${features.join(', ')}`);
    expect(features.length).toBeGreaterThan(0);
    
    // V√©rifier le contenu rendu
    const contentElements = await page.locator('h1, h2, h3, p').count();
    expect(contentElements).toBeGreaterThan(3);
    console.log(`‚úÖ ${contentElements} √©l√©ments de contenu rendus`);
    
    // V√©rifier les fonctionnalit√©s UI
    if (config.ui) {
      if (config.ui.showMenu) {
        console.log('‚úÖ Menu activ√© dans configuration');
      }
      if (config.ui.showConfiguration) {
        console.log('‚úÖ Panneau de configuration activ√©');
      }
    }
  });

  test('Test de tous les fichiers de contenu d√©mo', async ({ page }) => {
    console.log('=== TEST FICHIERS CONTENU D√âMO ===');
    
    // Tester l'acc√®s aux fichiers de contenu
    const contentFiles = [
      'minimal-content.md',
      'advanced-content.md',
      'advanced-content.fr.md',
      'full-config.fr.md',
      'full-config.en.md'
    ];
    
    for (const file of contentFiles) {
      const response = await page.request.get(`http://localhost:8080/demo/${file}`);
      expect(response.status()).toBe(200);
      
      const content = await response.text();
      expect(content.length).toBeGreaterThan(10);
      console.log(`‚úÖ ${file}: ${content.length} caract√®res`);
    }
  });

  test('Navigation entre d√©mos', async ({ page }) => {
    console.log('=== TEST NAVIGATION ENTRE D√âMOS ===');
    
    // D√©marrer depuis la page principale
    await page.goto('http://localhost:8080/');
    await page.waitForTimeout(2000);
    
    // Chercher et cliquer sur les liens vers les d√©mos
    const demoLinks = await page.locator('a[href*="demo/"]').all();
    console.log(`‚úÖ ${demoLinks.length} liens vers d√©mos trouv√©s sur page principale`);
    
    for (let i = 0; i < Math.min(3, demoLinks.length); i++) {
      const link = demoLinks[i];
      const href = await link.getAttribute('href');
      
      if (href && href.includes('.html')) {
        console.log(`üîó Test navigation vers: ${href}`);
        
        // Ouvrir dans un nouvel onglet pour pr√©server le contexte
        const [newPage] = await Promise.all([
          page.context().waitForEvent('page'),
          link.click({ modifiers: ['Meta'] }) // Cmd/Ctrl+click
        ]);
        
        await newPage.waitForTimeout(3000);
        
        // V√©rifier que la d√©mo se charge
        const newTitle = await newPage.title();
        expect(newTitle.length).toBeGreaterThan(0);
        console.log(`‚úÖ D√©mo charg√©e: "${newTitle}"`);
        
        // V√©rifier qu'OntoWave fonctionne
        const ontoWavePresent = await newPage.evaluate(() => window.OntoWave !== undefined);
        expect(ontoWavePresent).toBe(true);
        
        await newPage.close();
      }
    }
  });

  test('Test responsivit√© des d√©mos', async ({ page }) => {
    console.log('=== TEST RESPONSIVIT√â D√âMOS ===');
    
    const demos = [
      'demo/minimal-demo.html',
      'demo/advanced-demo.html',
      'demo/full-config.html'
    ];
    
    const viewports = [
      { width: 1200, height: 800, name: 'Desktop' },
      { width: 768, height: 1024, name: 'Tablet' },
      { width: 375, height: 667, name: 'Mobile' }
    ];
    
    for (const demo of demos) {
      console.log(`üì± Test responsivit√©: ${demo}`);
      
      for (const viewport of viewports) {
        await page.setViewportSize(viewport);
        await page.goto(`http://localhost:8080/${demo}`);
        await page.waitForTimeout(2000);
        
        // V√©rifier que le contenu est visible
        const contentVisible = await page.locator('h1, h2, h3').first().isVisible();
        expect(contentVisible).toBe(true);
        
        console.log(`‚úÖ ${demo} - ${viewport.name} (${viewport.width}x${viewport.height})`);
      }
    }
    
    // Remettre le viewport par d√©faut
    await page.setViewportSize({ width: 1200, height: 800 });
  });

  test('Test des erreurs et r√©cup√©ration', async ({ page }) => {
    console.log('=== TEST GESTION ERREURS ===');
    
    // Capturer les erreurs
    const errors = [];
    page.on('pageerror', error => errors.push(error.message));
    
    // Tester une d√©mo
    await page.goto('http://localhost:8080/demo/minimal-demo.html');
    await page.waitForTimeout(3000);
    
    // Filtrer les erreurs critiques
    const criticalErrors = errors.filter(error => 
      !error.includes('404') &&
      !error.includes('Failed to fetch') &&
      !error.includes('NetworkError') &&
      !error.includes('config.json')
    );
    
    console.log(`üìä Erreurs d√©tect√©es: ${errors.length} total, ${criticalErrors.length} critiques`);
    expect(criticalErrors.length).toBe(0);
    
    // V√©rifier que m√™me avec des erreurs mineures, OntoWave fonctionne
    const ontoWaveWorking = await page.evaluate(() => {
      return window.OntoWave && document.querySelector('h1');
    });
    expect(ontoWaveWorking).toBe(true);
    console.log('‚úÖ OntoWave fonctionne malgr√© erreurs mineures');
  });
});
