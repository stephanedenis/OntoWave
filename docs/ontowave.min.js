!function(n){"use strict";const e={fr:{menuHome:"Accueil",menuGallery:"Galerie",menuConfiguration:"Configuration",configTitle:"OntoWave - Configuration Compl√®te",configGeneral:"G√©n√©ral",configSiteTitle:"Titre du site :",configDefaultPage:"Page par d√©faut :",configBaseUrl:"URL de base :",configLanguages:"Langues et Localisation",configSupportedLanguages:"Langues support√©es (s√©par√©es par des virgules) :",configFallbackLanguage:"Langue de fallback :",configNavigation:"Navigation et Interface",configShowGallery:"Afficher la galerie d'exemples",configHomeButton:"Bouton Accueil",configBreadcrumb:"Fil d'Ariane (breadcrumb)",configToc:"Table des mati√®res",configMermaid:"Diagrammes Mermaid",configMermaidTheme:"Th√®me Mermaid :",configMermaidAuto:"D√©marrage automatique",configMermaidMaxWidth:"Utiliser la largeur maximale",configPlantuml:"Diagrammes PlantUML",configPlantumlServer:"Serveur PlantUML :",configPlantumlFormat:"Format de sortie :",configPrism:"Coloration Syntaxique (Prism.js)",configPrismTheme:"Th√®me Prism :",configPrismAutoload:"Chargement automatique",configUI:"Interface Utilisateur",configUITheme:"Th√®me de l'interface :",configUIResponsive:"Design responsive",configUIAnimations:"Animations et transitions",configApply:"Appliquer Configuration",configDownloadHTML:"T√©l√©charger HTML",configDownloadJS:"T√©l√©charger ontowave.min.js",configReset:"R√©initialiser",configLanguageNote:"Laissez vide pour un site monolingue"},en:{menuHome:"Home",menuGallery:"Gallery",menuConfiguration:"Configuration",configTitle:"OntoWave - Complete Configuration",configGeneral:"General",configSiteTitle:"Site title:",configDefaultPage:"Default page:",configBaseUrl:"Base URL:",configLanguages:"Languages and Localization",configSupportedLanguages:"Supported languages (comma separated):",configFallbackLanguage:"Fallback language:",configNavigation:"Navigation and Interface",configShowGallery:"Show examples gallery",configHomeButton:"Home button",configBreadcrumb:"Breadcrumb navigation",configToc:"Table of contents",configMermaid:"Mermaid Diagrams",configMermaidTheme:"Mermaid theme:",configMermaidAuto:"Auto start",configMermaidMaxWidth:"Use maximum width",configPlantuml:"PlantUML Diagrams",configPlantumlServer:"PlantUML server:",configPlantumlFormat:"Output format:",configPrism:"Syntax Highlighting (Prism.js)",configPrismTheme:"Prism theme:",configPrismAutoload:"Auto loading",configUI:"User Interface",configUITheme:"Interface theme:",configUIResponsive:"Responsive design",configUIAnimations:"Animations and transitions",configApply:"Apply Configuration",configDownloadHTML:"Download HTML",configDownloadJS:"Download ontowave.min.js",configReset:"Reset",configLanguageNote:"Leave empty for monolingual site"}},t={title:"OntoWave Documentation",baseUrl:"/",defaultPage:"index.md",containerId:"ontowave-container",locales:["fr","en"],fallbackLocale:"en",showGallery:!1,mermaid:{theme:"default",startOnLoad:!0,flowchart:{useMaxWidth:!0},sequence:{useMaxWidth:!0},gantt:{useMaxWidth:!0},journey:{useMaxWidth:!0}},plantuml:{server:"https://www.plantuml.com/plantuml",format:"svg"},prism:{theme:"default",autoload:!0},navigation:{showHome:!0,showBreadcrumb:!0,showToc:!0},ui:{theme:"default",responsive:!0,animations:!0,languageButtons:"menu"}};class o{constructor(n={}){this.config={...t,...n},n.i18n&&(n.i18n.supported&&(this.config.locales=n.i18n.supported),n.i18n.default&&(this.config.fallbackLocale=n.i18n.default)),this.container=null,this.mermaidLoaded=!1,this.prismLoaded=!1,this.currentPage=null,this.currentLanguage=null,this.svgCache=new Map,this.svgCacheTTL=3e5,this.svgCacheEnabled=!1!==n.svgCache}getCachedSVG(n){if(!this.svgCacheEnabled)return null;const e=this.svgCache.get(n);if(!e)return null;return Date.now()-e.timestamp>this.svgCacheTTL?(this.svgCache.delete(n),null):(console.log("‚úÖ SVG r√©cup√©r√© du cache:",n),e.svg)}cacheSVG(n,e){this.svgCacheEnabled&&(this.svgCache.set(n,{svg:e,timestamp:Date.now()}),console.log("üíæ SVG mis en cache:",n,`(${this.svgCache.size} entr√©es)`))}clearSVGCache(){const n=this.svgCache.size;this.svgCache.clear(),console.log(`üóëÔ∏è Cache SVG vid√© (${n} entr√©es supprim√©es)`)}getCurrentLanguage(){if(this.currentLanguage)return this.currentLanguage;const n=document.getElementById("lang-fr"),e=document.getElementById("lang-en");if(n&&e){if(n.classList.contains("visible")||!n.classList.contains("hidden")&&"none"!==n.style.display)return"fr";if(e.classList.contains("visible")||!e.classList.contains("hidden")&&"none"!==e.style.display)return"en"}const t=document.getElementById("btn-fr"),o=document.getElementById("btn-en");if(t&&o){if(t.classList.contains("active"))return"fr";if(o.classList.contains("active"))return"en"}return this.resolveLocale()||"en"}t(n,t=null){const o=t||this.getCurrentLanguage();return(e[o]||e.en)[n]||n}updateInterfaceTexts(n=null){const e=n||this.getCurrentLanguage();console.log("üåê Interface texts updating for language:",e);const t=document.querySelector('.ontowave-menu-option[onclick*="goHome"]');t&&(t.innerHTML=`üè† ${this.t("menuHome",e)}`);const o=document.querySelector('.ontowave-menu-option[onclick*="gallery.html"]');o&&(o.innerHTML=`üé® ${this.t("menuGallery",e)}`);const a=document.querySelector('.ontowave-menu-option[onclick*="toggleConfigurationPanel"]');a&&(a.innerHTML=`‚öôÔ∏è ${this.t("menuConfiguration",e)}`);const i=document.getElementById("ontowave-config-panel");if(i){const n=document.getElementById("config-title-full")?.value||this.config.title,t=document.getElementById("config-defaultPage-full")?.value||this.config.defaultPage,o=document.getElementById("config-baseUrl-full")?.value||this.config.baseUrl;i.remove();const a=document.querySelector('.ontowave-menu-option[onclick*="toggleConfigurationPanel"]');a&&a.classList.remove("selected"),setTimeout(()=>{this.toggleConfigurationPanel(null,e),setTimeout(()=>{const e=document.getElementById("config-title-full"),a=document.getElementById("config-defaultPage-full"),i=document.getElementById("config-baseUrl-full");e&&(e.value=n),a&&(a.value=t),i&&(i.value=o)},100)},50)}console.log("üåê Interface texts updated for language:",e)}switchLanguage(n){this.currentLanguage=n,this.updateLanguageButtonsState(n),this.updateInterfaceTexts(n);const e=(this.config.sources||{})[n]||this.config.defaultPage;e&&this.loadPage(e)}updateLanguageButtonsState(n=null){const e=n||this.getCurrentLanguage();document.querySelectorAll(".ontowave-lang-btn").forEach(n=>{n.classList.remove("active"),n.textContent.includes(e.toUpperCase())&&n.classList.add("active")}),document.querySelectorAll(".ontowave-fixed-lang-btn").forEach(n=>{n.classList.remove("active"),n.textContent.includes(e.toUpperCase())&&n.classList.add("active")}),console.log("üåê √âtat des boutons de langue mis √† jour pour:",e)}goHome(){const n=this.getCurrentLanguage(),e=(this.config.sources||{})[n]||this.config.defaultPage;this.loadPage(e)}getBrowserLocales(){const n=[];return navigator.languages&&n.push(...navigator.languages),navigator.language&&n.push(navigator.language),navigator.userLanguage&&n.push(navigator.userLanguage),[...new Set(n)]}resolveLocale(){const e=this.getBrowserLocales(),t=this.config.locales||[],o=this.config.defaultLocale||this.config.fallbackLocale;if(console.log("üåê Browser locales:",e),console.log("üåê Supported locales:",t),console.log("üåê Default locale:",o),0===t.length)return null;const a=n.location.hash||n.location.pathname;console.log("üîç Current URL:",a);for(const n of t){if(new RegExp(`\\.${n}\\.(md|html)`).test(a))return console.log("üéØ Page language detected from URL:",n,"in",a),n}for(const n of e)if(t.includes(n))return console.log("üéØ Exact browser match found:",n),n;for(const n of e){n.split("-")[0];for(const n of e){const e=n.split("-")[0],o=t.find(n=>n.startsWith(e));if(o)return console.log("üéØ Prefix match found:",n,"->",o),o}if(o&&t.includes(o))return console.log("üéØ Using configured default locale:",o),o}const i=t[0];return console.log("üéØ Using fallback locale:",i),i}isMultilingualMode(){return this.config.locales&&this.config.locales.length>0&&this.config.sources}generatePageCandidates(n){const e=this.resolveLocale(),t=[];if(!e)return t.push(n),t;const o=n.replace(/\.md$/,"");if(t.push(`${o}.${e}.md`),e.includes("-")){const n=e.split("-")[0];t.push(`${o}.${n}.md`)}return t.push(n),console.log("üìÑ Page candidates for",n,":",t),t}async init(){try{await this.loadConfigFromScript(),this.injectStyles(),await this.loadMermaid(),await this.loadPrism(),this.createInterface(),this.currentLanguage=this.resolveLocale(),this.initializeNavigation(),this.updateLanguageButtonsState(),await this.loadInitialPage(),console.log("‚úÖ OntoWave successfully initialized")}catch(n){console.error("‚ùå OntoWave initialization failed:",n),this.showError("Erreur d'initialisation OntoWave: "+n.message)}}async loadConfigFromScript(){if(n.ontoWaveConfig)return this.config={...this.config,...n.ontoWaveConfig},console.log("üìÑ Configuration loaded from window.ontoWaveConfig"),void console.log("üìÑ Final config:",this.config);const e=document.getElementById("ontowave-config");if(e&&"application/json"===e.type)try{const n=JSON.parse(e.textContent);this.config={...this.config,...n},console.log("üìÑ Configuration loaded from script tag"),console.log("üìÑ Final config:",this.config)}catch(n){console.warn("‚ö†Ô∏è Invalid JSON in ontowave-config script tag:",n)}}injectStyles(){const n=document.createElement("style");n.textContent="\n    .ontowave-container {\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif;\n      line-height: 1.6;\n      color: #24292e;\n      background: #fff;\n      margin: 0;\n      padding: 20px;\n      min-height: 100vh;\n    }\n    \n    /* Menu flottant minimal d√©pla√ßable */\n    .ontowave-floating-menu {\n      position: fixed;\n      top: 20px;\n      left: 20px;\n      z-index: 1000;\n      background: rgba(255, 255, 255, 0.95);\n      backdrop-filter: blur(10px);\n      border: 1px solid #e1e4e8;\n      border-radius: 44px;\n      padding: 10px;\n      box-shadow: 0 4px 12px rgba(27,31,35,0.15);\n      cursor: move;\n      transition: all 0.3s ease;\n      font-size: 1.2em;\n      user-select: none;\n      display: flex;\n      align-items: center;\n      gap: 0;\n      width: 44px;\n      height: 44px;\n      overflow: visible;\n      white-space: nowrap;\n    }\n    \n    .ontowave-floating-menu.no-drag {\n      cursor: default;\n    }\n    \n    .ontowave-floating-menu.expanded {\n      width: auto;\n      height: auto;\n      min-height: 44px;\n      border-radius: 22px;\n      padding: 10px 18px;\n      gap: 10px;\n    }\n    \n    .ontowave-floating-menu:hover {\n      transform: scale(1.05);\n      box-shadow: 0 6px 20px rgba(27,31,35,0.25);\n    }\n    \n    /* D√©sactiver le zoom quand le panneau de configuration est ouvert */\n    .ontowave-floating-menu.has-config-panel:hover {\n      transform: none;\n    }\n    \n    .ontowave-menu-icon {\n      cursor: pointer;\n      transition: transform 0.3s ease;\n      flex-shrink: 0;\n      width: 30px;\n      height: 30px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      font-size: 1.4em;\n      text-align: center;\n      line-height: 1;\n      margin: 0 auto;\n    }\n    \n    .ontowave-menu-icon:hover {\n      transform: scale(1.2);\n    }\n    \n    .ontowave-menu-content {\n      display: flex;\n      align-items: center;\n      gap: 15px;\n      opacity: 0;\n      width: 0;\n      overflow: hidden;\n      transition: all 0.3s ease;\n      white-space: nowrap;\n    }\n    \n    .ontowave-floating-menu.expanded .ontowave-menu-content {\n      opacity: 1;\n      width: auto;\n      overflow: visible;\n    }\n    \n    .ontowave-menu-brand {\n      font-weight: 600;\n      color: #0969da;\n      text-decoration: none;\n      cursor: pointer;\n      font-size: 0.9em;\n    }\n    \n    .ontowave-menu-brand:hover {\n      color: #0550ae;\n    }\n    \n    .org-suffix {\n      font-size: 0.7em;\n      opacity: 0.7;\n      font-weight: normal;\n    }\n    \n    .ontowave-menu-options {\n      display: flex;\n      gap: 8px;\n      flex-wrap: nowrap;\n    }\n    \n    .ontowave-menu-option {\n      padding: 6px 10px;\n      background: #f8f9fa;\n      border: 1px solid #d0d7de;\n      border-radius: 15px;\n      font-size: 0.75em;\n      cursor: pointer;\n      transition: all 0.2s ease;\n      white-space: nowrap;\n      pointer-events: auto;\n    }\n    \n    .ontowave-menu-option:hover {\n      background: #e2e8f0;\n      transform: translateY(-1px);\n    }\n    \n    .ontowave-menu-option.selected {\n      background: #0969da;\n      color: white;\n      border-color: #0969da;\n      box-shadow: 0 2px 8px rgba(9, 105, 218, 0.3);\n    }\n    \n    .ontowave-menu-option.selected:hover {\n      background: #0550ae;\n      border-color: #0550ae;\n      transform: translateY(-1px);\n    }\n    \n    /* Styles pour les boutons de langue */\n    .ontowave-lang-btn {\n      font-weight: bold;\n      font-size: 11px;\n    }\n    \n    .ontowave-lang-btn.active {\n      background: #28a745;\n      color: white;\n      border-color: #28a745;\n      box-shadow: 0 2px 8px rgba(40, 167, 69, 0.3);\n    }\n    \n    .ontowave-lang-btn.active:hover {\n      background: #1e7e34;\n      border-color: #1e7e34;\n    }\n    \n    /* Boutons de langue fix√©s - nouveaux styles */\n    .ontowave-fixed-lang-buttons {\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      z-index: 999;\n      display: flex;\n      gap: 8px;\n      background: rgba(255, 255, 255, 0.95);\n      padding: 8px 12px;\n      border-radius: 25px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      backdrop-filter: blur(10px);\n      border: 1px solid rgba(255, 255, 255, 0.2);\n    }\n    \n    /* Responsive : adaptation mobile */\n    @media (max-width: 768px) {\n      .ontowave-fixed-lang-buttons {\n        top: 10px;\n        right: 10px;\n        padding: 6px 8px;\n        gap: 4px;\n      }\n    }\n    \n    .ontowave-fixed-lang-btn {\n      background: linear-gradient(135deg, #6c757d 0%, #495057 100%);\n      color: white;\n      border: none;\n      padding: 6px 12px;\n      border-radius: 15px;\n      font-size: 12px;\n      font-weight: bold;\n      cursor: pointer;\n      transition: all 0.3s ease;\n      text-decoration: none;\n      display: flex;\n      align-items: center;\n      gap: 4px;\n      min-width: 40px;\n      justify-content: center;\n    }\n    \n    /* Responsive : boutons plus petits sur mobile */\n    @media (max-width: 768px) {\n      .ontowave-fixed-lang-btn {\n        padding: 4px 8px;\n        font-size: 11px;\n        min-width: 35px;\n        gap: 2px;\n      }\n    }\n    \n    .ontowave-fixed-lang-btn:hover {\n      background: linear-gradient(135deg, #5a6268 0%, #343a40 100%);\n      transform: translateY(-2px);\n      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n    }\n    \n    .ontowave-fixed-lang-btn.active {\n      background: linear-gradient(135deg, #28a745 0%, #20c997 100%);\n      box-shadow: 0 4px 12px rgba(40, 167, 69, 0.4);\n    }\n    \n    .ontowave-fixed-lang-btn.active:hover {\n      background: linear-gradient(135deg, #1e7e34 0%, #198754 100%);\n      transform: translateY(-2px);\n    }\n    \n    /* Pas d'en-t√™te - supprim√© */\n    .ontowave-header {\n      display: none;\n    }\n    \n    .ontowave-nav {\n      background: #f8f9fa;\n      border: 1px solid #e1e4e8;\n      border-radius: 8px;\n      padding: 1.5rem;\n      margin-bottom: 2rem;\n    }\n    \n    .ontowave-nav h3 {\n      margin: 0 0 1rem 0;\n      color: #24292e;\n      display: flex;\n      align-items: center;\n      gap: 0.5rem;\n    }\n    \n    .ontowave-nav-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n      gap: 1rem;\n    }\n    \n    .ontowave-nav-item {\n      padding: 1rem;\n      background: white;\n      border: 1px solid #d0d7de;\n      border-radius: 6px;\n      text-decoration: none;\n      color: #24292e;\n      display: flex;\n      align-items: center;\n      gap: 0.5rem;\n      transition: all 0.2s ease;\n      font-weight: 500;\n      cursor: pointer;\n    }\n    \n    .ontowave-nav-item:hover {\n      background: #f3f4f6;\n      border-color: #0969da;\n      transform: translateY(-2px);\n      box-shadow: 0 4px 12px rgba(27,31,35,0.15);\n    }\n    \n    .ontowave-content {\n      background: white;\n      padding: 2rem;\n      border-radius: 8px;\n      box-shadow: 0 2px 8px rgba(27,31,35,0.15);\n      border: 1px solid #e1e4e8;\n      margin-bottom: 2rem;\n      min-height: 300px;\n      max-width: 1200px;\n      margin-left: auto;\n      margin-right: auto;\n    }\n    \n    /* Headers corrig√©s */\n    .ontowave-content h1 {\n      color: #24292e;\n      border-bottom: 2px solid #e1e4e8;\n      padding-bottom: 8px;\n      margin-bottom: 16px;\n      font-size: 2em;\n      font-weight: 600;\n    }\n    \n    .ontowave-content h2 {\n      color: #24292e;\n      margin-top: 24px;\n      margin-bottom: 16px;\n      font-size: 1.5em;\n      font-weight: 600;\n    }\n    \n    .ontowave-content h3 {\n      color: #24292e;\n      margin-top: 20px;\n      margin-bottom: 12px;\n      font-size: 1.25em;\n      font-weight: 600;\n    }\n    \n    .ontowave-content h4 {\n      color: #24292e;\n      margin-top: 16px;\n      margin-bottom: 10px;\n      font-size: 1.1em;\n      font-weight: 600;\n    }\n    \n    .ontowave-content h5 {\n      color: #24292e;\n      margin-top: 14px;\n      margin-bottom: 8px;\n      font-size: 1em;\n      font-weight: 600;\n    }\n    \n    .ontowave-content h6 {\n      color: #24292e;\n      margin-top: 12px;\n      margin-bottom: 6px;\n      font-size: 0.9em;\n      font-weight: 600;\n    }\n    \n    /* S√©parateurs hr */\n    .ontowave-content hr {\n      border: none;\n      border-top: 1px solid #e1e4e8;\n      margin: 24px 0;\n    }\n    \n    /* Mermaid diagrams */\n    .ontowave-mermaid {\n      margin: 20px 0;\n      padding: 20px;\n      background: #f8f9fa;\n      border: 1px solid #e1e4e8;\n      border-radius: 8px;\n      text-align: center;\n    }\n    \n    .ontowave-loading {\n      text-align: center;\n      color: #666;\n      padding: 2rem;\n    }\n    \n    .ontowave-error {\n      color: #d73a49;\n      text-align: center;\n      padding: 2rem;\n      background: #ffeef0;\n      border: 1px solid #fdaeb7;\n      border-radius: 6px;\n    }\n    \n    .ontowave-mermaid {\n      background: #f6f8fa;\n      border: 1px solid #d0d7de;\n      border-radius: 6px;\n      padding: 1rem;\n      margin: 1rem 0;\n      text-align: center;\n    }\n    \n    .ontowave-plantuml {\n      background: #f6f8fa;\n      border: 1px solid #d0d7de;\n      border-radius: 6px;\n      padding: 1rem;\n      margin: 1rem 0;\n      text-align: center;\n    }\n    \n    .ontowave-plantuml img {\n      max-width: 100%;\n      height: auto;\n    }\n    \n    .ontowave-code {\n      background: #f6f8fa;\n      border: 1px solid #d0d7de;\n      border-radius: 6px;\n      padding: 1rem;\n      margin: 1rem 0;\n      overflow-x: auto;\n      font-family: ui-monospace, SFMono-Regular, monospace;\n    }\n    \n    .ontowave-breadcrumb {\n      padding: 0.5rem 0;\n      margin-bottom: 1rem;\n      border-bottom: 1px solid #e1e4e8;\n    }\n    \n    .ontowave-breadcrumb a {\n      color: #0969da;\n      text-decoration: none;\n      margin-right: 0.5rem;\n    }\n    \n    .ontowave-breadcrumb a:hover {\n      text-decoration: underline;\n    }\n    \n    .ontowave-breadcrumb span {\n      color: #656d76;\n      margin-right: 0.5rem;\n    }\n    \n    .ontowave-status {\n      background: #d4edda;\n      border: 1px solid #c3e6cb;\n      border-radius: 8px;\n      padding: 1rem;\n      margin-top: 2rem;\n    }\n    \n    .ontowave-status h4 {\n      margin: 0 0 0.5rem 0;\n      color: #155724;\n    }\n    \n    .ontowave-status ul {\n      margin: 0;\n      padding-left: 1.5rem;\n      color: #155724;\n    }\n    \n    /* === FIX #1: STYLES TABLEAUX === */\n    .ontowave-table {\n      width: 100%;\n      border-collapse: collapse;\n      margin: 16px 0;\n      font-size: 14px;\n      box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n    }\n    \n    .ontowave-table th {\n      background: #f6f8fa;\n      padding: 12px 16px;\n      font-weight: 600;\n      border: 1px solid #d0d7de;\n      color: #24292f;\n    }\n    \n    .ontowave-table td {\n      padding: 12px 16px;\n      border: 1px solid #d0d7de;\n      color: #24292f;\n    }\n    \n    .ontowave-table tbody tr:nth-child(even) {\n      background: #f6f8fa;\n    }\n    \n    .ontowave-table tbody tr:hover {\n      background: #eaeef2;\n    }\n    /* === FIN FIX #1 === */\n    \n    /* === FIX #4: STYLES CODE SOURCE PLANTUML + DIAGRAMME === */\n    .ontowave-plantuml-container {\n      margin: 20px 0;\n    }\n    \n    .ontowave-plantuml-source {\n      margin-bottom: 30px;\n      border: 1px solid #d0d7de;\n      border-radius: 6px;\n      overflow: hidden;\n    }\n    \n    .ontowave-plantuml-source h3 {\n      margin: 0;\n      padding: 12px 16px;\n      background: #f6f8fa;\n      border-bottom: 1px solid #d0d7de;\n      font-size: 16px;\n      font-weight: 600;\n      color: #24292f;\n    }\n    \n    .ontowave-plantuml-source pre {\n      margin: 0;\n      background: #ffffff;\n      padding: 16px;\n      overflow-x: auto;\n      max-height: 500px;\n      overflow-y: auto;\n    }\n    \n    .ontowave-plantuml-source code {\n      font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;\n      font-size: 13px;\n      line-height: 1.6;\n    }\n    \n    .ontowave-plantuml-render {\n      /* Bordure d√©sactiv√©e √† la demande de l'utilisateur */\n      /* border: 1px solid #d0d7de; */\n      /* border-radius: 6px; */\n      overflow: hidden;\n      background: #ffffff;\n    }\n    \n    .ontowave-plantuml-render h3 {\n      margin: 0;\n      padding: 12px 16px;\n      background: #f6f8fa;\n      border-bottom: 1px solid #d0d7de;\n      font-size: 16px;\n      font-weight: 600;\n      color: #24292f;\n    }\n    \n    .ontowave-plantuml-render img {\n      padding: 20px;\n      display: block;\n      margin: 0 auto;\n    }\n    \n    /* Styles pour les liens dans les SVG PlantUML */\n    .plantuml-diagram a.ontowave-internal-link {\n      transition: opacity 0.2s;\n    }\n    \n    .plantuml-diagram a.ontowave-internal-link:hover {\n      opacity: 0.7;\n    }\n    \n    .plantuml-diagram svg {\n      max-width: 100%;\n      height: auto;\n    }\n    /* === FIN FIX #4 === */\n    \n    @media (max-width: 768px) {\n      .ontowave-header {\n        padding: 1rem;\n      }\n      \n      .ontowave-header h1 {\n        font-size: 2em;\n      }\n      \n      .ontowave-nav-grid {\n        grid-template-columns: 1fr;\n      }\n      \n      .ontowave-content {\n        padding: 1rem;\n      }\n    }\n  ",document.head.appendChild(n)}async loadMermaid(){return new Promise(e=>{if(n.mermaid)return this.mermaidLoaded=!0,this.initializeMermaid(),void e();const t=document.createElement("script");t.src="https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.min.js",t.onload=()=>{this.mermaidLoaded=!0,this.initializeMermaid(),e()},t.onerror=()=>{console.warn("‚ö†Ô∏è Failed to load Mermaid library"),e()},document.head.appendChild(t)})}initializeMermaid(){n.mermaid&&(n.mermaid.initialize(this.config.mermaid),console.log("üé® Mermaid initialized"))}async loadPrism(){return new Promise(e=>{if(n.Prism)return this.prismLoaded=!0,console.log("üé® Prism already loaded"),e();const t=document.createElement("link");t.rel="stylesheet",t.href="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism.min.css",document.head.appendChild(t);const o=document.createElement("script");o.src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-core.min.js",o.onload=()=>{console.log("üé® Prism core loaded"),n.Prism.languages.javascript||(n.Prism.languages.javascript={"class-name":null});const t=["markup","css","javascript"];let o=0;const a=()=>{o++,console.log(`üî§ Essential language loaded: ${o}/${t.length}`),o>=t.length&&(n.Prism.languages.markup&&(n.Prism.languages.html=n.Prism.languages.markup,console.log("üî§ HTML alias created from markup")),this.prismLoaded=!0,console.log("‚úÖ Prism ready with essential languages"),e(),n.Prism&&n.Prism.languages&&(n.Prism.languages.plantuml={comment:/'[^\n]*/,keyword:/@startuml|@enduml|@startmindmap|@endmindmap|@startsalt|@endsalt|@startgantt|@endgantt|participant|actor|boundary|control|entity|database|collections|queue|as|title|note|over|left|right|end|alt|else|opt|loop|par|break|critical|group|autonumber|activate|deactivate|destroy|create|hide|show|class|interface|abstract|enum|extends|implements|package|namespace|skinparam|style|sprite/,string:{pattern:/"(?:\\.|[^\\"\r\n])*"/,greedy:!0},arrow:/(?:--|->|o-|-o|\*-|-\*|\.-|-\.)/,operator:/[:=[\](){}|]/,tag:/#[a-zA-Z0-9]+/,function:/\[\[.*?\]\]/,number:/\b\d+\b/,punctuation:/[,;]/},console.log("üè≠ PlantUML language definition added to Prism")),setTimeout(()=>{const e=["python","java","bash","json","yaml","mermaid"];let t=0;const o=()=>{if(t>=e.length)return console.log("‚úÖ All safe Prism languages loaded"),void a();const n=e[t++],i=document.createElement("script");i.src=`https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-${n}.min.js`,i.onload=()=>{console.log(`üî§ Additional Prism language loaded: ${n}`),setTimeout(o,10)},i.onerror=()=>{console.warn(`‚ö†Ô∏è Failed to load Prism language: ${n}`),o()},document.head.appendChild(i)},a=()=>{if(!n.Prism.languages.javascript||!n.Prism.languages.javascript["class-name"])return void console.warn("‚ö†Ô∏è JavaScript grammar incomplete, skipping TypeScript");const e=document.createElement("script");e.src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-typescript.min.js",e.onload=()=>{console.log("üî§ Additional Prism language loaded: typescript")},e.onerror=()=>{console.warn("‚ö†Ô∏è Failed to load Prism language: typescript")},document.head.appendChild(e)};o()},100))};t.forEach(n=>{const e=document.createElement("script");e.src=`https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-${n}.min.js`,e.onload=a,e.onerror=()=>{console.warn(`‚ö†Ô∏è Failed to load essential Prism language: ${n}`),a()},document.head.appendChild(e)})},o.onerror=()=>{console.warn("‚ö†Ô∏è Failed to load Prism library"),e()},document.head.appendChild(o)})}createInterface(n=null){this.container=document.getElementById(this.config.containerId),this.container||(this.container=document.createElement("div"),this.container.id=this.config.containerId,document.body.appendChild(this.container)),this.container.className="ontowave-container";const e=this.config.showGallery?`<span class="ontowave-menu-option" onclick="window.location.href='gallery.html'">üé® ${this.t("menuGallery",n)}</span>`:"",t=this.config.ui?.languageButtons||"menu",o="menu"===t||"both"===t,a=this.config.locales&&this.config.locales.length>1&&o?this.config.locales.map(e=>`<span class="ontowave-menu-option ontowave-lang-btn${(n||this.getCurrentLanguage())===e?" active":""}" onclick="event.stopPropagation(); window.OntoWave.instance.switchLanguage('${e}');">üåê ${e.toUpperCase()}</span>`).join(""):"";this.container.innerHTML=`\n        <div class="ontowave-floating-menu" id="ontowave-floating-menu" title="OntoWave Menu">\n          <span class="ontowave-menu-icon" id="ontowave-menu-icon">&#127754;</span>\n          <div class="ontowave-menu-content" id="ontowave-menu-content">\n            <a href="https://ontowave.org/" target="_blank" class="ontowave-menu-brand">OntoWave<span class="org-suffix">.org</span></a>\n            <div class="ontowave-menu-options">\n              <span class="ontowave-menu-option" onclick="window.OntoWave.instance.goHome()">üè† ${this.t("menuHome",n)}</span>\n              ${e}\n              ${a}\n              <span class="ontowave-menu-option" onclick="event.stopPropagation(); window.OntoWave.instance.toggleConfigurationPanel(event, '${n||this.getCurrentLanguage()}');">‚öôÔ∏è ${this.t("menuConfiguration",n)}</span>\n            </div>\n          </div>\n        </div>\n        \n        <div class="ontowave-content" id="ontowave-content">\n          <div class="ontowave-loading">‚è≥ Chargement du contenu...</div>\n        </div>\n        \n        <div class="ontowave-status" style="display: none;">\n          <h4>‚úÖ OntoWave Package Actif</h4>\n          <ul>\n            <li><strong>Chargement rapide:</strong> Syst√®me int√©gr√©</li>\n            <li><strong>Mermaid:</strong> ${this.mermaidLoaded?"Charg√©":"Non disponible"}</li>\n            <li><strong>Prism:</strong> ${this.prismLoaded?"Charg√©":"Non disponible"}</li>\n            <li><strong>PlantUML:</strong> Support int√©gr√©</li>\n            <li><strong>Navigation:</strong> Hash pr√©serv√©</li>\n          </ul>\n        </div>\n      `,this.createFixedLanguageButtons(n)}createFixedLanguageButtons(n=null){const e=document.getElementById("ontowave-fixed-lang-buttons");e&&e.remove();const t=this.config.ui?.languageButtons||"menu",o="fixed"===t||"both"===t;if(this.config.locales&&this.config.locales.length>1&&o){const e=n||this.getCurrentLanguage(),o=document.createElement("div");o.id="ontowave-fixed-lang-buttons",o.className="ontowave-fixed-lang-buttons";const a=this.config.locales.map(n=>{const t=e===n?" active":"",o=this.getLanguageFlag(n);return`<button class="ontowave-fixed-lang-btn${t}" onclick="window.OntoWave.instance.switchLanguage('${n}')" title="Changer en ${n.toUpperCase()}">${o} ${n.toUpperCase()}</button>`}).join("");o.innerHTML=a,document.body.appendChild(o),console.log("üåê Boutons de langue fix√©s cr√©√©s:",this.config.locales,"Mode:",t)}}getLanguageFlag(n){return{fr:"üá´üá∑",en:"üá¨üáß",es:"üá™üá∏",de:"üá©üá™",it:"üáÆüáπ",pt:"üáµüáπ",zh:"üá®üá≥",ja:"üáØüáµ",ko:"üá∞üá∑",ru:"üá∑üá∫"}[n]||"üåê"}initializeNavigation(){n.addEventListener("hashchange",()=>{const n=location.hash.replace("#","")||this.config.defaultPage;this.loadPage(n)}),this.createDefaultNavigation(),this.initializeFloatingMenu()}initializeFloatingMenu(){const e=document.getElementById("ontowave-floating-menu"),t=document.getElementById("ontowave-menu-icon");if(!e||!t)return;let o=!1,a=!1,i={x:0,y:0};function l(){!o&&!document.querySelector(".ontowave-config-panel")?e.classList.remove("no-drag"):(e.classList.add("no-drag"),a=!1,document.body.style.userSelect="",document.body.style.cursor="")}function r(){a=!1,e.style.cursor="move",document.body.style.userSelect="",document.body.style.cursor=""}n.ontowaveUpdateDragState=l,t.addEventListener("click",n=>{n.stopPropagation(),o=!o,o?e.classList.add("expanded"):e.classList.remove("expanded"),l()}),document.addEventListener("click",n=>{!e.contains(n.target)&&o&&(o=!1,e.classList.remove("expanded"),l())}),e.addEventListener("mousedown",n=>{if(o||document.querySelector(".ontowave-config-panel"))return;if(n.target.closest("a, .ontowave-menu-option"))return;a=!0;const t=e.getBoundingClientRect();i.x=n.clientX-t.left,i.y=n.clientY-t.top,e.style.cursor="grabbing",document.body.style.userSelect="none",n.preventDefault(),n.stopPropagation()}),document.addEventListener("mousemove",t=>{if(!a)return;const o=t.clientX-i.x,l=t.clientY-i.y,r=n.innerWidth-e.offsetWidth,s=n.innerHeight-e.offsetHeight;e.style.left=Math.max(0,Math.min(r,o))+"px",e.style.top=Math.max(0,Math.min(s,l))+"px"}),document.addEventListener("mouseup",()=>{a&&(a=!1,e.style.cursor="move",document.body.style.userSelect="")}),document.addEventListener("visibilitychange",r),n.addEventListener("blur",r),n.addEventListener("focus",r),n.resetOntoWaveDragState=r,e.addEventListener("touchstart",n=>{if(n.target.closest("a, .ontowave-menu-option"))return;const t=n.touches[0],o=e.getBoundingClientRect();i.x=t.clientX-o.left,i.y=t.clientY-o.top,a=!0}),document.addEventListener("touchmove",t=>{if(!a)return;t.preventDefault();const o=t.touches[0],l=o.clientX-i.x,r=o.clientY-i.y,s=n.innerWidth-e.offsetWidth,c=n.innerHeight-e.offsetHeight;e.style.left=Math.max(0,Math.min(s,l))+"px",e.style.top=Math.max(0,Math.min(c,r))+"px"}),document.addEventListener("touchend",()=>{a=!1}),l(),this.enhanceMenuOptionClicks()}enhanceMenuOptionClicks(){const n=document.querySelector('.ontowave-menu-option[onclick*="toggleConfigurationPanel"]');n&&n.addEventListener("click",n=>{n.preventDefault(),n.stopPropagation(),console.log("Configuration button clicked via event listener"),this.toggleConfigurationPanel(n)},{capture:!0})}createDefaultNavigation(){const n=document.getElementById("ontowave-nav-grid");if(!n)return;n.innerHTML=[{href:"index.md",icon:"üè†",label:"Accueil"},{href:"en/index.md",icon:"üá¨üáß",label:"English"},{href:"fr/index.md",icon:"üá´üá∑",label:"Fran√ßais"},{href:"demo/mermaid.md",icon:"üßú‚Äç‚ôÄÔ∏è",label:"D√©mo Mermaid"},{href:"demo/plantuml.md",icon:"üè≠",label:"PlantUML"},{href:"demo/advanced-shapes.md",icon:"üéØ",label:"Formes Avanc√©es"}].map(n=>`\n        <a href="#${n.href}" class="ontowave-nav-item" onclick="window.OntoWave.loadPage('${n.href}')">\n          ${n.icon} ${n.label}\n        </a>\n      `).join("")}async loadInitialPage(){const n=location.hash.replace("#","");if(!n&&this.config.languages&&this.config.languages.supported){const n=navigator.language.split("-")[0].toLowerCase();console.log("üåç Browser language detected:",n);const e=this.config.languages.supported.split(",").map(n=>n.trim().toLowerCase()),t=this.config.languages.fallback||"fr";if(e.includes(n)&&n!==t){console.log(`üåç Auto-redirecting to browser language: ${n}`);const e=`${this.config.defaultPage.replace(/\.([a-z]{2})\.md$/,".md").replace(/\.md$/,"")}.${n}.md`;try{if((await fetch(this.config.baseUrl+e,{method:"HEAD"})).ok)return console.log(`üåç Language page found: ${e}`),location.hash="#"+e,void await this.loadPage(e)}catch(n){console.log(`üåç Language page not found: ${e}, using fallback`)}}}if(this.isMultilingualMode()&&!n){const n=this.config.sources[this.config.defaultLocale];if(console.log("üåê Multilingual mode detected"),console.log("üåê Default locale:",this.config.defaultLocale),console.log("üåê Default source:",n),console.log("üåê Sources config:",this.config.sources),n)return console.log("üåê Multilingual mode: redirecting to",n),void(location.hash="#"+n)}const e=n||this.config.defaultPage;if("index.md"===e){const n=this.generatePageCandidates(e);let t=!1;for(const e of n)try{if((await fetch(this.config.baseUrl+e,{method:"HEAD"})).ok){await this.loadPage(e),t=!0;break}}catch(n){continue}if(!t)return console.log("üìÑ No index file found, showing configuration"),void this.showConfigurationInterface()}else await this.loadPage(e)}async loadPage(e){const t=document.getElementById("ontowave-content");if(t){console.log("üìÑ Loading page:",e),this.currentPage=e,n.resetOntoWaveDragState&&n.resetOntoWaveDragState(),location.hash!=="#"+e&&(location.hash="#"+e),this.updateBreadcrumb(e),t.innerHTML='<div class="ontowave-loading">‚è≥ Chargement de '+e+"...</div>";try{const o=await fetch(this.config.baseUrl+e);if(!o.ok)throw new Error(`HTTP ${o.status}: ${o.statusText}`);const a=await o.text();let i;if(console.log("‚úÖ Content loaded:",a.length,"characters"),e.endsWith(".puml")){function l(n){const e=(new TextEncoder).encode(n);let t="";for(let n=0;n<e.length;n++)t+=e[n].toString(16).padStart(2,"0");return"h"+t}console.log("üè≠ Processing .puml file");const r=l(a),s=`${this.config.plantuml.server}/${this.config.plantuml.format}/~${r}`;i=`\n            <div class="ontowave-plantuml-container">\n              <div class="ontowave-plantuml-source">\n                <h3>üìù Code Source PlantUML</h3>\n                <pre><code class="language-plantuml">${a.replace(/</g,"&lt;").replace(/>/g,"&gt;")}</code></pre>\n              </div>\n              <div class="ontowave-plantuml-render">\n                <h3>üé® Diagramme Rendu</h3>\n                <div class="plantuml-diagram" data-plantuml-url="${s}">‚è≥ Chargement diagramme PlantUML...</div>\n              </div>\n            </div>\n          `}else i=await this.renderMarkdown(a);t.innerHTML=i;document.querySelectorAll(".ontowave-loading").forEach(n=>n.remove()),await this.processDiagrams(t),await this.processPlantUML(t),await this.processPrism(t)}catch(c){console.error("‚ùå Failed to load page:",c),this.showError(`Impossible de charger ${e}: ${c.message}`)}}}updateBreadcrumb(n){const e=document.getElementById("ontowave-breadcrumb");if(!e||!this.config.navigation.showBreadcrumb)return;const t=n.split("/"),o=['<a href="#'+this.config.defaultPage+'">üè† Accueil</a>'];let a="";t.forEach((n,e)=>{e===t.length-1?o.push("<span>"+n.replace(".md","")+"</span>"):(a+=(a?"/":"")+n,o.push('<a href="#'+a+'/index.md">'+n+"</a>"))}),e.innerHTML=o.join(" <span>‚Ä∫</span> "),e.style.display="block"}async renderMarkdown(n){let e=n;e=e.replace(/\n(\|[^\n]+\|\n)+/gm,n=>{const e=n.trim().split("\n");if(e.length<2)return n;const t=e[0].split("|").map(n=>n.trim()).filter(n=>n),o=e[1].split("|").map(n=>n.trim()).filter(n=>n),a=e.slice(2).map(n=>n.split("|").map(n=>n.trim()).filter(n=>""!==n)),i=o.map(n=>n.startsWith(":")&&n.endsWith(":")?"center":n.endsWith(":")?"right":"left");let l='<table class="ontowave-table">';return l+="<thead><tr>",t.forEach((n,e)=>{const t=i[e]||"left";l+=`<th style="text-align: ${t}">${n}</th>`}),l+="</tr></thead>",l+="<tbody>",a.forEach(n=>{l+="<tr>",n.forEach((n,e)=>{const t=i[e]||"left";l+=`<td style="text-align: ${t}">${n}</td>`}),l+="</tr>"}),l+="</tbody></table>","\n"+l+"\n"});const t=[];return e=e.replace(/```(\w+)([\s\S]*?)```/g,(n,e,o)=>{const a=o.trim(),i=`__CODE_BLOCK_${t.length}__`;if("mermaid"===e){const l="mermaid-"+Math.random().toString(36).substr(2,9);t.push(`<div class="mermaid" id="${l}">${a}</div>`)}else if("plantuml"===e){const r="plantuml-"+Math.random().toString(36).substr(2,9);function s(n){const e=(new TextEncoder).encode(n);let t="";for(let n=0;n<e.length;n++)t+=e[n].toString(16).padStart(2,"0");return"h"+t}const c=s(a),d=`${this.config.plantuml.server}/${this.config.plantuml.format}/~${c}`;t.push(`<div class="plantuml-diagram" id="${r}" data-plantuml-url="${d}">‚è≥ Chargement diagramme PlantUML...</div>`)}else{const g=this.prismLoaded?`language-${e}`:"";console.log(`üìù Processing code block: language="${e}", prismLoaded=${this.prismLoaded}, class="${g}"`);const u=a.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;");t.push(`<pre class="ontowave-code"><code class="${g}">${u}</code></pre>`)}return i}),e=e.replace(/^###### (.+)$/gm,"<h6>$1</h6>").replace(/^##### (.+)$/gm,"<h5>$1</h5>").replace(/^#### (.+)$/gm,"<h4>$1</h4>").replace(/^### (.+)$/gm,"<h3>$1</h3>").replace(/^## (.+)$/gm,"<h2>$1</h2>").replace(/^# (.+)$/gm,"<h1>$1</h1>").replace(/^---+$/gm,"<hr>").replace(/!\[([^\]]*)\]\(([^)]+)\)/g,'<img src="$2" alt="$1">').replace(/\[([^\]]+)\]\(([^)]+\.html[^)]*)\)/g,'<a href="$2">$1</a>').replace(/\[([^\]]+)\]\((https?:\/\/[^)]+)\)/g,'<a href="$2" target="_blank">$1</a>').replace(/\[([^\]]+)\]\(([^)]+\.(tar\.gz|zip|pdf|doc|docx|xls|xlsx|ppt|pptx|txt|csv|json|xml|js|css|png|jpg|jpeg|gif|svg|webp)[^)]*)\)/g,'<a href="$2" download>$1</a>').replace(/\[([^\]]+)\]\(([^)]+)\)/g,'<a href="#$2" onclick="window.OntoWave.loadPage(\'$2\')">$1</a>').replace(/\*\*(.+?)\*\*/g,"<strong>$1</strong>").replace(/\*(.+?)\*/g,"<em>$1</em>").replace(/`([^`]+)`/g,"<code>$1</code>").split("\n\n").map(n=>n.trim()).filter(n=>n.length>0).map(n=>n.match(/^<(h[1-6]|hr|div|pre)/)?n:`<p>${n.replace(/\n/g,"<br>")}</p>`).join("\n"),t.forEach((n,t)=>{e=e.replace(`__CODE_BLOCK_${t}__`,n)}),e}async processDiagrams(e){if(!this.mermaidLoaded||!n.mermaid)return;const t=e.querySelectorAll(".mermaid");if(0!==t.length){console.log("üé® Processing",t.length,"Mermaid diagrams");try{t.forEach(n=>{n.removeAttribute("data-processed")}),await n.mermaid.run(),console.log("‚úÖ Mermaid diagrams rendered successfully"),setTimeout(()=>{const o=e.querySelectorAll(".mermaid svg");console.log("üé® SVG elements found:",o.length),0===o.length&&t.length>0&&(console.log("‚ö†Ô∏è Retrying Mermaid rendering..."),t.forEach(n=>{n.removeAttribute("data-processed")}),n.mermaid.init(void 0,t))},1e3)}catch(n){console.error("‚ùå Mermaid rendering error:",n),t.forEach(e=>{e.querySelector("svg")||(e.innerHTML=`<div style="color: #d73a49; padding: 10px;">‚ùå Erreur de rendu Mermaid: ${n.message}</div><pre style="background: #f8f8f8; padding: 10px; margin-top: 10px; border-radius: 4px;"><code>${e.textContent}</code></pre>`)})}}}async processPlantUML(n){const e=n.querySelectorAll(".plantuml-diagram[data-plantuml-url]");if(0===e.length)return;console.log("üå± Processing",e.length,"PlantUML diagrams");const t=Array.from(e).map(async n=>{const e=n.getAttribute("data-plantuml-url");try{let t;const o=this.getCachedSVG(e);if(o)t=o;else{const n=await fetch(e);if(!n.ok)throw new Error(`HTTP ${n.status}: ${n.statusText}`);t=await n.text(),this.cacheSVG(e,t)}const a=document.createElement("div");a.innerHTML=t;const i=a.querySelector("svg");if(!i)throw new Error("No SVG found in response");i.style.maxWidth="100%",i.style.height="auto",i.style.display="block",i.style.margin="0 auto";const l=i.querySelectorAll("a[href]");console.log(`üîó Found ${l.length} links in PlantUML diagram`),l.forEach(n=>{const e=n.getAttribute("href");e&&(e.endsWith(".md")||e.endsWith(".html")||e.endsWith(".puml"))&&(n.addEventListener("click",n=>{n.preventDefault(),n.stopPropagation(),console.log(`üîó Navigating to: ${e}`),this.loadPage(e)}),n.style.cursor="pointer",n.setAttribute("class",(n.getAttribute("class")||"")+" ontowave-internal-link"))}),n.innerHTML="",n.appendChild(i),console.log("‚úÖ PlantUML diagram rendered with",l.length,"clickable links")}catch(t){console.error("‚ùå Failed to load PlantUML diagram:",t),n.innerHTML=`\n            <div style="color: #d73a49; padding: 20px; background: #fff5f5; border: 1px solid #feb2b2; border-radius: 6px;">\n              <strong>‚ùå Erreur de rendu PlantUML</strong>\n              <p style="margin: 5px 0; font-size: 14px;">${t.message}</p>\n              <details style="margin-top: 10px;">\n                <summary style="cursor: pointer; color: #0366d6;">D√©tails techniques</summary>\n                <pre style="background: #f6f8fa; padding: 10px; margin-top: 5px; border-radius: 4px; overflow-x: auto; font-size: 12px;">URL: ${e}</pre>\n              </details>\n            </div>\n          `}});await Promise.all(t),console.log("‚úÖ All PlantUML diagrams processed")}async processPrism(e){if(console.log("üîç processPrism called - prismLoaded:",this.prismLoaded,"window.Prism:",!!n.Prism),n.Prism){if(!n.Prism.languages||!n.Prism.languages.javascript){console.log("‚è≥ JavaScript not loaded yet, waiting...");for(let e=0;e<20;e++)if(await new Promise(n=>setTimeout(n,100)),n.Prism.languages&&n.Prism.languages.javascript){console.log("‚úÖ JavaScript language now available");break}n.Prism.languages&&n.Prism.languages.javascript||console.warn("‚ö†Ô∏è JavaScript language still not available after waiting")}try{console.log("üî§ Available Prism languages:",n.Prism.languages?Object.keys(n.Prism.languages):"none");const t=e.querySelectorAll('code[class*="language-"]');console.log("üé® Found",t.length,"code blocks with language classes"),t.forEach((e,t)=>{console.log(`üîç Code block ${t}:`),console.log(`  - class: "${e.className}"`),console.log(`  - content length: ${e.textContent?.length}`),console.log(`  - content preview: "${e.textContent?.substring(0,50)}..."`),console.log(`  - parent visible: ${"none"!==n.getComputedStyle(e.parentElement).display}`),console.log(`  - element visible: ${"none"!==n.getComputedStyle(e).display}`)});const o=e.querySelectorAll("code");if(console.log("üìù Total code blocks found:",o.length),t.length>0){const o=t[0];console.log("üß™ Testing manual highlighting on first element...");const a=o.className.split(" ").find(n=>n.startsWith("language-")),i=a?a.replace("language-",""):"unknown";if(console.log(`üî§ Language detected: "${i}"`),console.log(`üî§ Language available in Prism: ${!(!n.Prism.languages||!n.Prism.languages[i])}`),n.Prism.languages&&n.Prism.languages[i]){console.log("üß™ Attempting manual highlight...");const e=o.textContent;try{const t=n.Prism.highlight(e,n.Prism.languages[i],i);console.log(`üé® Manual highlight result length: ${t.length}`),console.log(`üé® Manual highlight preview: "${t.substring(0,100)}..."`),o.innerHTML=t,console.log("‚úÖ Manual highlight applied")}catch(n){console.error("‚ùå Manual highlight failed:",n)}}n.Prism.highlightAllUnder(e),console.log("‚úÖ Prism syntax highlighting applied to",t.length,"blocks");const l=e.querySelectorAll(".token");console.log("üé® Tokens created after highlighting:",l.length),l.length>0&&l.forEach((n,e)=>{console.log(`Token ${e}: "${n.textContent}" (class: ${n.className})`)})}else console.log("‚ö†Ô∏è No code blocks with language classes found for Prism")}catch(n){console.error("‚ùå Prism highlighting error:",n)}}else console.log("üé® Prism not available, skipping syntax highlighting")}showConfigurationInterface(){const n=document.getElementById("ontowave-content");if(!n)return;const e=JSON.stringify(this.config,null,2).replace(/"/g,"&quot;").replace(/</g,"&lt;").replace(/>/g,"&gt;");n.innerHTML=`\n        <div class="ontowave-config-interface">\n          <div class="config-header">\n            <h1>üåä OntoWave Configuration</h1>\n            <p>Aucun fichier index trouv√©. Configurez OntoWave pour votre projet :</p>\n          </div>\n          \n          <div class="config-content">\n            <div class="config-form">\n              <h2>üìù Configuration</h2>\n              \n              <div class="form-group">\n                <label for="config-title">Titre du site :</label>\n                <input type="text" id="config-title" />\n              </div>\n              \n              <div class="form-group">\n                <label for="config-defaultPage">Page par d√©faut :</label>\n                <input type="text" id="config-defaultPage" />\n              </div>\n              \n              <div class="form-group">\n                <label for="config-locales">Langues support√©es (s√©par√©es par des virgules) :</label>\n                <input type="text" id="config-locales" placeholder="fr-CA, fr, en" />\n              </div>\n              \n              <div class="form-group">\n                <label>\n                  <input type="checkbox" id="config-showGallery" />\n                  Afficher la galerie d'exemples\n                </label>\n              </div>\n              \n              <div class="form-group">\n                <label for="config-mermaidTheme">Th√®me Mermaid :</label>\n                <select id="config-mermaidTheme">\n                  <option value="default">Default</option>\n                  <option value="dark">Dark</option>\n                  <option value="forest">Forest</option>\n                  <option value="neutral">Neutral</option>\n                </select>\n              </div>\n              \n              <div class="form-actions">\n                <button onclick="window.OntoWave.instance.updateConfigFromForm()">‚úÖ Appliquer</button>\n                <button onclick="window.OntoWave.instance.downloadConfig()">üíæ T√©l√©charger HTML</button>\n                <button onclick="window.OntoWave.instance.resetConfig()">üîÑ Reset</button>\n              </div>\n            </div>\n            \n            <div class="config-code">\n              <h2>üíª Code HTML g√©n√©r√©</h2>\n              <div class="code-preview">\n                <pre><code id="generated-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset="UTF-8"&gt;\n    &lt;title&gt;${this.config.title}&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;script src="ontowave.min.js"&gt;&lt;/script&gt;\n    &lt;script type="application/json" id="ontowave-config"&gt;\n${e}\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n              </div>\n              \n              <div class="usage-info">\n                <h3>üìã Instructions d'utilisation</h3>\n                <ol>\n                  <li>Configurez les options dans le formulaire</li>\n                  <li>Cliquez sur "T√©l√©charger HTML" pour obtenir votre fichier</li>\n                  <li>Placez vos fichiers .md dans le m√™me dossier</li>\n                  <li>Ouvrez le fichier HTML dans votre navigateur</li>\n                </ol>\n                \n                <h3>üåê Gestion des langues</h3>\n                <ul>\n                  <li><strong>Monolingue :</strong> Laissez "Langues support√©es" vide</li>\n                  <li><strong>Multilingue :</strong> Ajoutez les codes de langue (ex: fr, en, fr-CA)</li>\n                  <li><strong>Fichiers :</strong> index.fr.md, index.en.md, etc.</li>\n                  <li><strong>Fallback :</strong> index.md si aucune langue trouv√©e</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      `,this.addConfigStyles(),this.populateConfigForm(),this.updateGeneratedCode()}populateConfigForm(){const n=document.getElementById("config-title"),e=document.getElementById("config-defaultPage"),t=document.getElementById("config-locales"),o=document.getElementById("config-showGallery"),a=document.getElementById("config-mermaidTheme");n&&(n.value=this.config.title),e&&(e.value=this.config.defaultPage),t&&(t.value=this.config.locales.join(", ")),o&&(o.checked=this.config.showGallery),a&&(a.value=this.config.mermaid.theme)}addConfigStyles(){if(document.getElementById("ontowave-config-styles"))return;const n=document.createElement("style");n.id="ontowave-config-styles",n.textContent="\n        .ontowave-config-interface {\n          max-width: 1200px;\n          margin: 0 auto;\n          padding: 20px;\n          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        }\n        \n        .config-header {\n          text-align: center;\n          margin-bottom: 40px;\n        }\n        \n        .config-header h1 {\n          color: #0969da;\n          margin-bottom: 10px;\n        }\n        \n        .config-content {\n          display: grid;\n          grid-template-columns: 1fr 1fr;\n          gap: 40px;\n          align-items: start;\n        }\n        \n        .config-form {\n          background: #f8f9fa;\n          padding: 30px;\n          border-radius: 12px;\n          border: 1px solid #e1e4e8;\n        }\n        \n        .config-code {\n          background: #ffffff;\n          padding: 30px;\n          border-radius: 12px;\n          border: 1px solid #e1e4e8;\n        }\n        \n        .form-group {\n          margin-bottom: 20px;\n        }\n        \n        .form-group label {\n          display: block;\n          font-weight: 600;\n          margin-bottom: 8px;\n          color: #24292e;\n        }\n        \n        .form-group input, .form-group select {\n          width: 100%;\n          padding: 10px;\n          border: 1px solid #d0d7de;\n          border-radius: 6px;\n          font-size: 14px;\n        }\n        \n        .form-group input[type=\"checkbox\"] {\n          width: auto;\n          margin-right: 8px;\n        }\n        \n        .form-actions {\n          display: flex;\n          gap: 10px;\n          margin-top: 30px;\n        }\n        \n        .form-actions button {\n          flex: 1;\n          padding: 12px 20px;\n          border: none;\n          border-radius: 6px;\n          font-weight: 600;\n          cursor: pointer;\n          transition: all 0.2s ease;\n        }\n        \n        .form-actions button:first-child {\n          background: #28a745;\n          color: white;\n        }\n        \n        .form-actions button:nth-child(2) {\n          background: #0969da;\n          color: white;\n        }\n        \n        .form-actions button:last-child {\n          background: #6c757d;\n          color: white;\n        }\n        \n        .form-actions button:hover {\n          transform: translateY(-1px);\n          box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n        }\n        \n        .code-preview {\n          background: #f6f8fa;\n          border: 1px solid #e1e4e8;\n          border-radius: 6px;\n          padding: 16px;\n          overflow-x: auto;\n          margin-bottom: 20px;\n        }\n        \n        .code-preview pre {\n          margin: 0;\n          font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;\n          font-size: 13px;\n          line-height: 1.4;\n        }\n        \n        .usage-info h3 {\n          color: #0969da;\n          margin-top: 25px;\n          margin-bottom: 10px;\n        }\n        \n        .usage-info ul, .usage-info ol {\n          padding-left: 20px;\n        }\n        \n        .usage-info li {\n          margin-bottom: 5px;\n        }\n        \n        @media (max-width: 768px) {\n          .config-content {\n            grid-template-columns: 1fr;\n            gap: 20px;\n          }\n        }\n      ",document.head.appendChild(n)}updateConfigFromForm(){const n=document.getElementById("config-title").value,e=document.getElementById("config-defaultPage").value,t=document.getElementById("config-locales").value.split(",").map(n=>n.trim()).filter(n=>n.length>0),o=document.getElementById("config-showGallery").checked,a=document.getElementById("config-mermaidTheme").value;this.config.title=n,this.config.defaultPage=e,this.config.locales=t,this.config.showGallery=o,this.config.mermaid.theme=a,console.log("üìù Configuration updated:",this.config),document.title=this.config.title,this.updateGeneratedCode(),this.showNotification("‚úÖ Configuration mise √† jour")}updateGeneratedCode(){const n={title:this.config.title,baseUrl:this.config.baseUrl,defaultPage:this.config.defaultPage,locales:this.config.locales,fallbackLocale:this.config.fallbackLocale,showGallery:this.config.showGallery,mermaid:{theme:this.config.mermaid.theme}},e=JSON.stringify(n,null,2).replace(/"/g,"&quot;").replace(/</g,"&lt;").replace(/>/g,"&gt;"),t=`&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset="UTF-8"&gt;\n    &lt;title&gt;${this.config.title}&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;script src="ontowave.min.js"&gt;&lt;/script&gt;\n    &lt;script type="application/json" id="ontowave-config"&gt;\n${e}\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;`,o=document.getElementById("generated-html");o&&(o.innerHTML=t)}downloadConfig(){const n={title:this.config.title,baseUrl:this.config.baseUrl,defaultPage:this.config.defaultPage,locales:this.config.locales,fallbackLocale:this.config.fallbackLocale,showGallery:this.config.showGallery,mermaid:{theme:this.config.mermaid.theme}},e=JSON.stringify(n,null,2),t=`<!DOCTYPE html>\n<html>\n<head>\n    <meta charset="UTF-8">\n    <title>${this.config.title}</title>\n</head>\n<body>\n    <script src="ontowave.min.js"><\/script>\n    <script type="application/json" id="ontowave-config">\n${e}\n    <\/script>\n</body>\n</html>`,o=new Blob([t],{type:"text/html"}),a=URL.createObjectURL(o),i=document.createElement("a");i.href=a,i.download="index.html",document.body.appendChild(i),i.click(),document.body.removeChild(i),URL.revokeObjectURL(a),this.showNotification("üíæ Fichier HTML t√©l√©charg√©")}resetConfig(){this.config={...t},this.showConfigurationInterface(),this.showNotification("üîÑ Configuration r√©initialis√©e")}showNotification(n){const e=document.createElement("div");if(e.style.cssText="\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: #28a745;\n        color: white;\n        padding: 12px 20px;\n        border-radius: 6px;\n        z-index: 10000;\n        font-weight: 600;\n        box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n        animation: slideIn 0.3s ease;\n      ",e.textContent=n,!document.getElementById("notification-styles")){const n=document.createElement("style");n.id="notification-styles",n.textContent="\n          @keyframes slideIn {\n            from { transform: translateX(100%); opacity: 0; }\n            to { transform: translateX(0); opacity: 1; }\n          }\n        ",document.head.appendChild(n)}document.body.appendChild(e),setTimeout(()=>{e.style.animation="slideIn 0.3s ease reverse",setTimeout(()=>{e.parentNode&&e.parentNode.removeChild(e)},300)},3e3)}showError(n){const e=document.getElementById("ontowave-content");e&&(e.innerHTML=`<div class="ontowave-error">‚ùå ${n}</div>`)}toggleConfigurationPanel(e,t=null){e&&(e.preventDefault(),e.stopPropagation());const o=t||this.getCurrentLanguage();console.log("‚öôÔ∏è Opening config panel with locale:",o);const a=document.querySelector(".ontowave-menu-content");if(!a)return void console.error("Menu content not found");const i=document.querySelector('.ontowave-menu-option[onclick*="toggleConfigurationPanel"]');let l=document.getElementById("ontowave-config-panel");if(l){l.remove(),i&&i.classList.remove("selected");const e=document.getElementById("ontowave-floating-menu");return e&&e.classList.remove("has-config-panel"),"function"==typeof n.ontowaveUpdateDragState&&n.ontowaveUpdateDragState(),void console.log("Config panel closed")}i&&i.classList.add("selected"),l=document.createElement("div"),l.id="ontowave-config-panel",l.className="ontowave-config-panel",l.innerHTML=`\n        <div class="config-panel-content">\n          <div class="config-full-panel">\n            <h3>üåä ${this.t("configTitle",o)}</h3>\n            \n            \x3c!-- Section G√©n√©ral --\x3e\n            <div class="config-section">\n              <h4>üìñ ${this.t("configGeneral",o)}</h4>\n              <div class="config-row">\n                <div class="form-group-full">\n                  <label for="config-title-full">${this.t("configSiteTitle",o)}</label>\n                  <input type="text" id="config-title-full" value="${this.config.title}" />\n                </div>\n                <div class="form-group-full">\n                  <label for="config-defaultPage-full">${this.t("configDefaultPage",o)}</label>\n                  <input type="text" id="config-defaultPage-full" value="${this.config.defaultPage}" placeholder="index.md" />\n                </div>\n              </div>\n              <div class="form-group-full">\n                <label for="config-baseUrl-full">${this.t("configBaseUrl",o)}</label>\n                <input type="text" id="config-baseUrl-full" value="${this.config.baseUrl}" placeholder="/" />\n              </div>\n            </div>\n\n            \x3c!-- Section Langues et Localisation --\x3e\n            <div class="config-section">\n              <h4>üåç ${this.t("configLanguages",o)}</h4>\n              <div class="config-row">\n                <div class="form-group-full">\n                  <label for="config-locales-full">${this.t("configSupportedLanguages",o)}</label>\n                  <input type="text" id="config-locales-full" value="${this.config.locales.join(", ")}" placeholder="fr-CA, fr, en" />\n                  <small>${this.t("configLanguageNote",o)}</small>\n                </div>\n                <div class="form-group-full">\n                  <label for="config-fallbackLocale-full">${this.t("configFallbackLanguage",o)}</label>\n                  <select id="config-fallbackLocale-full">\n                    <option value="en" ${"en"===this.config.fallbackLocale?"selected":""}>English (en)</option>\n                    <option value="fr" ${"fr"===this.config.fallbackLocale?"selected":""}>Fran√ßais (fr)</option>\n                    <option value="es" ${"es"===this.config.fallbackLocale?"selected":""}>Espa√±ol (es)</option>\n                    <option value="de" ${"de"===this.config.fallbackLocale?"selected":""}>Deutsch (de)</option>\n                  </select>\n                </div>\n              </div>\n            </div>\n\n            \x3c!-- Section Navigation et Interface --\x3e\n            <div class="config-section">\n              <h4>üß≠ ${this.t("configNavigation",o)}</h4>\n              <div class="config-row">\n                <div class="form-group-checkbox">\n                  <label>\n                    <input type="checkbox" id="config-showGallery-full" ${this.config.showGallery?"checked":""} />\n                    üé® ${this.t("configShowGallery",o)}\n                  </label>\n                </div>\n                <div class="form-group-checkbox">\n                  <label>\n                    <input type="checkbox" id="config-navHome-full" ${!1!==this.config.navigation?.showHome?"checked":""} />\n                    üè† ${this.t("configHomeButton",o)}\n                  </label>\n                </div>\n              </div>\n              <div class="config-row">\n                <div class="form-group-checkbox">\n                  <label>\n                    <input type="checkbox" id="config-navBreadcrumb-full" ${!1!==this.config.navigation?.showBreadcrumb?"checked":""} />\n                    üìç ${this.t("configBreadcrumb",o)}\n                  </label>\n                </div>\n                <div class="form-group-checkbox">\n                  <label>\n                    <input type="checkbox" id="config-navToc-full" ${!1!==this.config.navigation?.showToc?"checked":""} />\n                    üìë ${this.t("configToc",o)}\n                  </label>\n                </div>\n              </div>\n            </div>\n\n            \x3c!-- Section Diagrammes Mermaid --\x3e\n            <div class="config-section">\n              <h4>üìä ${this.t("configMermaid",o)}</h4>\n              <div class="config-row">\n                <div class="form-group-full">\n                  <label for="config-mermaidTheme-full">${this.t("configMermaidTheme",o)}</label>\n                  <select id="config-mermaidTheme-full">\n                    <option value="default" ${"default"===this.config.mermaid?.theme?"selected":""}>Default (clair)</option>\n                    <option value="dark" ${"dark"===this.config.mermaid?.theme?"selected":""}>Dark (sombre)</option>\n                    <option value="forest" ${"forest"===this.config.mermaid?.theme?"selected":""}>Forest (vert)</option>\n                    <option value="neutral" ${"neutral"===this.config.mermaid?.theme?"selected":""}>Neutral (neutre)</option>\n                  </select>\n                </div>\n                <div class="form-group-checkbox">\n                  <label>\n                    <input type="checkbox" id="config-mermaidStart-full" ${!1!==this.config.mermaid?.startOnLoad?"checked":""} />\n                    üöÄ ${this.t("configMermaidAuto",o)}\n                  </label>\n                </div>\n              </div>\n              <div class="config-row">\n                <div class="form-group-checkbox">\n                  <label>\n                    <input type="checkbox" id="config-mermaidMaxWidth-full" ${!1!==this.config.mermaid?.flowchart?.useMaxWidth?"checked":""} />\n                    üìê ${this.t("configMermaidMaxWidth",o)}\n                  </label>\n                </div>\n              </div>\n            </div>\n\n            \x3c!-- Section PlantUML --\x3e\n            <div class="config-section">\n              <h4>üåø ${this.t("configPlantuml",o)}</h4>\n              <div class="config-row">\n                <div class="form-group-full">\n                  <label for="config-plantumlServer-full">${this.t("configPlantumlServer",o)}</label>\n                  <input type="text" id="config-plantumlServer-full" value="${this.config.plantuml?.server||"https://www.plantuml.com/plantuml"}" />\n                </div>\n                <div class="form-group-full">\n                  <label for="config-plantumlFormat-full">${this.t("configPlantumlFormat",o)}</label>\n                  <select id="config-plantumlFormat-full">\n                    <option value="svg" ${"svg"===this.config.plantuml?.format?"selected":""}>SVG (vectoriel)</option>\n                    <option value="png" ${"png"===this.config.plantuml?.format?"selected":""}>PNG (bitmap)</option>\n                  </select>\n                </div>\n              </div>\n            </div>\n\n            \x3c!-- Section Coloration Syntaxique --\x3e\n            <div class="config-section">\n              <h4>üé® ${this.t("configPrism",o)}</h4>\n              <div class="config-row">\n                <div class="form-group-full">\n                  <label for="config-prismTheme-full">${this.t("configPrismTheme",o)}</label>\n                  <select id="config-prismTheme-full">\n                    <option value="default" ${"default"===this.config.prism?.theme?"selected":""}>Default (clair)</option>\n                    <option value="dark" ${"dark"===this.config.prism?.theme?"selected":""}>Dark (sombre)</option>\n                    <option value="twilight" ${"twilight"===this.config.prism?.theme?"selected":""}>Twilight</option>\n                  </select>\n                </div>\n                <div class="form-group-checkbox">\n                  <label>\n                    <input type="checkbox" id="config-prismAutoload-full" ${!1!==this.config.prism?.autoload?"checked":""} />\n                    üîÑ ${this.t("configPrismAutoload",o)}\n                  </label>\n                </div>\n              </div>\n            </div>\n\n            \x3c!-- Section Interface Utilisateur --\x3e\n            <div class="config-section">\n              <h4>üíª ${this.t("configUI",o)}</h4>\n              <div class="config-row">\n                <div class="form-group-full">\n                  <label for="config-uiTheme-full">${this.t("configUITheme",o)}</label>\n                  <select id="config-uiTheme-full">\n                    <option value="default" ${"default"===this.config.ui?.theme?"selected":""}>Default (clair)</option>\n                    <option value="dark" ${"dark"===this.config.ui?.theme?"selected":""}>Dark (sombre)</option>\n                    <option value="auto" ${"auto"===this.config.ui?.theme?"selected":""}>Auto (syst√®me)</option>\n                  </select>\n                </div>\n                <div class="form-group-checkbox">\n                  <label>\n                    <input type="checkbox" id="config-uiResponsive-full" ${!1!==this.config.ui?.responsive?"checked":""} />\n                    üì± ${this.t("configUIResponsive",o)}\n                  </label>\n                </div>\n              </div>\n              <div class="config-row">\n                <div class="form-group-checkbox">\n                  <label>\n                    <input type="checkbox" id="config-uiAnimations-full" ${!1!==this.config.ui?.animations?"checked":""} />\n                    ‚ú® ${this.t("configUIAnimations",o)}\n                  </label>\n                </div>\n              </div>\n            </div>\n\n            \x3c!-- Actions --\x3e\n            <div class="form-actions-full">\n              <button onclick="window.OntoWave.instance.updateConfigFromFullPanel()" class="btn-primary">‚úÖ ${this.t("configApply",o)}</button>\n              <button onclick="window.OntoWave.instance.downloadConfigFromPanel()" class="btn-secondary">üíæ ${this.t("configDownloadHTML",o)}</button>\n              <button onclick="window.OntoWave.instance.downloadOntoWaveScript()" class="btn-secondary">üì• ${this.t("configDownloadJS",o)}</button>\n              <button onclick="window.OntoWave.instance.resetConfigToDefaults()" class="btn-warning">üîÑ ${this.t("configReset",o)}</button>\n            </div>\n          </div>\n        </div>\n      `,this.addConfigPanelStyles(),a.appendChild(l);const r=document.getElementById("ontowave-floating-menu");r&&r.classList.add("has-config-panel"),"function"==typeof n.ontowaveUpdateDragState&&n.ontowaveUpdateDragState(),this.updateGeneratedCodeMini(),console.log("Config panel opened")}updateConfigFromFullPanel(){const n=document.getElementById("config-title-full")?.value||this.config.title,e=document.getElementById("config-defaultPage-full")?.value||this.config.defaultPage,t=document.getElementById("config-baseUrl-full")?.value||this.config.baseUrl,o=document.getElementById("config-locales-full")?.value.split(",").map(n=>n.trim()).filter(n=>n.length>0)||this.config.locales,a=document.getElementById("config-fallbackLocale-full")?.value||this.config.fallbackLocale,i=document.getElementById("config-showGallery-full")?.checked||!1,l=!1!==document.getElementById("config-navHome-full")?.checked,r=!1!==document.getElementById("config-navBreadcrumb-full")?.checked,s=!1!==document.getElementById("config-navToc-full")?.checked,c=document.getElementById("config-mermaidTheme-full")?.value||"default",d=!1!==document.getElementById("config-mermaidStart-full")?.checked,g=!1!==document.getElementById("config-mermaidMaxWidth-full")?.checked,u=document.getElementById("config-plantumlServer-full")?.value||"https://www.plantuml.com/plantuml",m=document.getElementById("config-plantumlFormat-full")?.value||"svg",f=document.getElementById("config-prismTheme-full")?.value||"default",p=!1!==document.getElementById("config-prismAutoload-full")?.checked,h=document.getElementById("config-uiTheme-full")?.value||"default",v=!1!==document.getElementById("config-uiResponsive-full")?.checked,b=!1!==document.getElementById("config-uiAnimations-full")?.checked;this.config.title=n,this.config.defaultPage=e,this.config.baseUrl=t,this.config.locales=o,this.config.fallbackLocale=a,this.config.showGallery=i,this.config.navigation={showHome:l,showBreadcrumb:r,showToc:s},this.config.mermaid={theme:c,startOnLoad:d,flowchart:{useMaxWidth:g},sequence:{useMaxWidth:g},gantt:{useMaxWidth:g},journey:{useMaxWidth:g}},this.config.plantuml={server:u,format:m},this.config.prism={theme:f,autoload:p},this.config.ui={theme:h,responsive:v,animations:b},document.title=this.config.title,this.showNotification("Configuration appliqu√©e avec succ√®s ! üéâ"),console.log("Configuration mise √† jour:",this.config)}resetConfigToDefaults(){if(confirm("Voulez-vous vraiment r√©initialiser toute la configuration aux valeurs par d√©faut ?")){Object.assign(this.config,{title:"OntoWave Documentation",baseUrl:"/",defaultPage:"index.md",locales:[],fallbackLocale:"en",showGallery:!1,mermaid:{theme:"default",startOnLoad:!0,flowchart:{useMaxWidth:!0},sequence:{useMaxWidth:!0},gantt:{useMaxWidth:!0},journey:{useMaxWidth:!0}},plantuml:{server:"https://www.plantuml.com/plantuml",format:"svg"},prism:{theme:"default",autoload:!0},navigation:{showHome:!0,showBreadcrumb:!0,showToc:!0},ui:{theme:"default",responsive:!0,animations:!0}});const e=document.getElementById("ontowave-config-panel");e&&(e.remove(),"function"==typeof n.ontowaveUpdateDragState&&n.ontowaveUpdateDragState(),setTimeout(()=>this.toggleConfigurationPanel(),100)),this.showNotification("Configuration r√©initialis√©e ! üîÑ")}}updateConfigFromPanel(){const n=document.getElementById("config-title-mini")?.value||this.config.title,e=document.getElementById("config-locales-mini")?.value.split(",").map(n=>n.trim()).filter(n=>n.length>0)||this.config.locales,t=document.getElementById("config-showGallery-mini")?.checked||this.config.showGallery;this.config.title=n,this.config.locales=e,this.config.showGallery=t,document.title=this.config.title,this.updateGeneratedCodeMini(),this.showNotification("‚úÖ Configuration mise √† jour")}downloadConfigFromPanel(){const n={title:this.config.title,baseUrl:this.config.baseUrl,defaultPage:this.config.defaultPage,locales:this.config.locales,fallbackLocale:this.config.fallbackLocale,showGallery:this.config.showGallery,mermaid:{theme:this.config.mermaid.theme}},e=JSON.stringify(n,null,2),t=`<!DOCTYPE html>\n<html>\n<head>\n    <meta charset="UTF-8">\n    <title>${this.config.title}</title>\n</head>\n<body>\n    <script src="ontowave.min.js"><\/script>\n    <script type="application/json" id="ontowave-config">\n${e}\n    <\/script>\n</body>\n</html>`,o=new Blob([t],{type:"text/html"}),a=URL.createObjectURL(o),i=document.createElement("a");i.href=a,i.download="index.html",document.body.appendChild(i),i.click(),document.body.removeChild(i),URL.revokeObjectURL(a),this.showNotification("üíæ Fichier HTML t√©l√©charg√©")}downloadOntoWaveScript(){const n=document.createElement("a");n.href="ontowave.min.js",n.download="ontowave.min.js",document.body.appendChild(n),n.click(),document.body.removeChild(n),this.showNotification("üì• Fichier ontowave.min.js t√©l√©charg√©")}updateGeneratedCodeMini(){const n={title:this.config.title,baseUrl:this.config.baseUrl,defaultPage:this.config.defaultPage,locales:this.config.locales,fallbackLocale:this.config.fallbackLocale,showGallery:this.config.showGallery,mermaid:{theme:this.config.mermaid.theme}},e=JSON.stringify(n,null,2).replace(/"/g,"&quot;").replace(/</g,"&lt;").replace(/>/g,"&gt;"),t=`&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset="UTF-8"&gt;\n    &lt;title&gt;${this.config.title}&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;script src="ontowave.min.js"&gt;&lt;/script&gt;\n    &lt;script type="application/json" id="ontowave-config"&gt;\n${e}\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;`,o=document.getElementById("generated-html-mini");o&&(o.innerHTML=t)}addConfigPanelStyles(){if(document.getElementById("ontowave-config-panel-styles"))return;const n=document.createElement("style");n.id="ontowave-config-panel-styles",n.textContent="\n        /* Panneau de configuration √©tendu */\n        .ontowave-config-panel {\n          position: absolute;\n          top: 100%;\n          left: 0;\n          right: 0;\n          background: white;\n          border: 1px solid #e1e4e8;\n          border-radius: 12px;\n          box-shadow: 0 16px 48px rgba(0,0,0,0.15);\n          z-index: 1001;\n          margin-top: 12px;\n          max-height: 90vh;\n          overflow-y: auto;\n          min-width: 90vw;\n          max-width: 95vw;\n          width: auto;\n        }\n        \n        .config-panel-content {\n          padding: 0;\n        }\n        \n        .config-full-panel {\n          padding: 32px;\n          max-width: none;\n        }\n        \n        .config-full-panel h3 {\n          margin: 0 0 32px 0;\n          color: #0969da;\n          font-size: 24px;\n          font-weight: 700;\n          text-align: center;\n          padding-bottom: 16px;\n          border-bottom: 2px solid #f6f8fa;\n        }\n        \n        /* Sections de configuration */\n        .config-section {\n          margin-bottom: 32px;\n          padding: 24px;\n          background: #f6f8fa;\n          border-radius: 8px;\n          border-left: 4px solid #0969da;\n        }\n        \n        .config-section h4 {\n          margin: 0 0 20px 0;\n          color: #24292e;\n          font-size: 18px;\n          font-weight: 600;\n          display: flex;\n          align-items: center;\n          gap: 8px;\n        }\n        \n        /* Disposition en lignes */\n        .config-row {\n          display: grid;\n          grid-template-columns: 1fr 1fr;\n          gap: 20px;\n          margin-bottom: 16px;\n        }\n        \n        .config-row:last-child {\n          margin-bottom: 0;\n        }\n        \n        /* Groupes de formulaire */\n        .form-group-full {\n          margin-bottom: 0;\n        }\n        \n        .form-group-full label {\n          display: block;\n          font-weight: 600;\n          margin-bottom: 8px;\n          color: #24292e;\n          font-size: 14px;\n        }\n        \n        .form-group-full input,\n        .form-group-full select {\n          width: 100%;\n          padding: 12px;\n          border: 2px solid #d0d7de;\n          border-radius: 6px;\n          font-size: 14px;\n          transition: border-color 0.2s ease;\n        }\n        \n        .form-group-full input:focus,\n        .form-group-full select:focus {\n          outline: none;\n          border-color: #0969da;\n          box-shadow: 0 0 0 3px rgba(9, 105, 218, 0.1);\n        }\n        \n        .form-group-full small {\n          display: block;\n          margin-top: 4px;\n          font-size: 12px;\n          color: #656d76;\n          font-style: italic;\n        }\n        \n        /* Checkboxes */\n        .form-group-checkbox {\n          display: flex;\n          align-items: center;\n          margin-bottom: 0;\n        }\n        \n        .form-group-checkbox label {\n          display: flex;\n          align-items: center;\n          font-weight: 500;\n          color: #24292e;\n          font-size: 14px;\n          cursor: pointer;\n          margin: 0;\n        }\n        \n        .form-group-checkbox input[type=\"checkbox\"] {\n          width: auto;\n          margin: 0 8px 0 0;\n          transform: scale(1.2);\n          accent-color: #0969da;\n        }\n        \n        /* Actions du formulaire */\n        .form-actions-full {\n          display: flex;\n          gap: 16px;\n          justify-content: center;\n          margin-top: 40px;\n          padding-top: 24px;\n          border-top: 2px solid #f6f8fa;\n          flex-wrap: wrap;\n        }\n        \n        .form-actions-full button {\n          padding: 12px 24px;\n          border: none;\n          border-radius: 8px;\n          font-size: 14px;\n          font-weight: 600;\n          cursor: pointer;\n          transition: all 0.2s ease;\n          min-width: 180px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          gap: 8px;\n        }\n        \n        .btn-primary {\n          background: #0969da;\n          color: white;\n        }\n        \n        .btn-primary:hover {\n          background: #0550ae;\n          transform: translateY(-1px);\n          box-shadow: 0 4px 12px rgba(9, 105, 218, 0.3);\n        }\n        \n        .btn-secondary {\n          background: #6f7782;\n          color: white;\n        }\n        \n        .btn-secondary:hover {\n          background: #57606a;\n          transform: translateY(-1px);\n          box-shadow: 0 4px 12px rgba(111, 119, 130, 0.3);\n        }\n        \n        .btn-warning {\n          background: #d73a49;\n          color: white;\n        }\n        \n        .btn-warning:hover {\n          background: #b31d28;\n          transform: translateY(-1px);\n          box-shadow: 0 4px 12px rgba(215, 58, 73, 0.3);\n        }\n        \n        /* Responsive pour petits √©crans */\n        @media (max-width: 768px) {\n          .ontowave-config-panel {\n            min-width: 95vw;\n            margin-top: 8px;\n          }\n          \n          .config-full-panel {\n            padding: 20px;\n          }\n          \n          .config-row {\n            grid-template-columns: 1fr;\n            gap: 16px;\n          }\n          \n          .form-actions-full {\n            flex-direction: column;\n            align-items: stretch;\n          }\n          \n          .form-actions-full button {\n            min-width: auto;\n          }\n        }\n        \n        /* Styles pour compatibilit√© avec l'ancien panneau compact */\n        .config-form-compact h3,\n        .config-preview-compact h3 {\n          margin: 0 0 16px 0;\n          color: #0969da;\n          font-size: 16px;\n          font-weight: 600;\n        }\n        \n        .form-group-compact {\n          margin-bottom: 16px;\n        }\n        \n        .form-group-compact label {\n          display: block;\n          font-weight: 600;\n          margin-bottom: 6px;\n          color: #24292e;\n          font-size: 13px;\n        }\n        \n        .form-group-compact input {\n          width: 100%;\n          padding: 8px;\n          border: 1px solid #d0d7de;\n          border-radius: 4px;\n          font-size: 13px;\n        }\n        \n        .form-group-compact input[type=\"checkbox\"] {\n          width: auto;\n          margin-right: 6px;\n        }\n        \n        .form-actions-compact {\n          display: flex;\n          gap: 10px;\n          margin-top: 20px;\n          flex-wrap: wrap;\n        }\n        \n        .form-actions-compact button {\n          flex: 1;\n          padding: 10px 16px;\n          border: none;\n          border-radius: 6px;\n          background: #0969da;\n          color: white;\n          font-size: 13px;\n          font-weight: 600;\n          cursor: pointer;\n          transition: background 0.2s ease;\n          min-width: 120px;\n        }\n        \n        .form-actions-compact button:hover {\n          background: #0550ae;\n        }\n        \n        .config-preview-compact {\n          background: #f6f8fa;\n          border-radius: 6px;\n          padding: 16px;\n        }\n        \n        .code-preview-mini {\n          background: #24292e;\n          color: #f6f8fa;\n          padding: 12px;\n          border-radius: 4px;\n          font-family: 'SF Mono', Consolas, 'Liberation Mono', Menlo, monospace;\n          font-size: 11px;\n          line-height: 1.4;\n          overflow-x: auto;\n          max-height: 300px;\n          overflow-y: auto;\n        }\n      ",document.head.appendChild(n)}navigate(n){this.loadPage(n)}getConfig(){return{...this.config}}updateConfig(n){this.config={...this.config,...n},console.log("üìù Configuration updated")}}async function a(){try{const n=await fetch("./config.json");if(n.ok){const e=await n.json();return console.log("üìÅ Configuration charg√©e depuis config.json:",e),e}}catch(n){console.log("üìÅ Pas de config.json trouv√©, utilisation de la configuration par d√©faut")}return{}}document.addEventListener("DOMContentLoaded",async()=>{let e=n.OntoWaveConfig||{};if(n.OntoWaveConfig){e={...await a(),...n.OntoWaveConfig}}else e=await a();n.OntoWave={instance:new o(e)},await n.OntoWave.instance.init(),console.log("üåä OntoWave initialis√© automatiquement")}),n.OntoWaveClass=o}(window);