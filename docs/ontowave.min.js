(c=>{let o={fr:{menuHome:"Accueil",menuGallery:"Galerie",menuConfiguration:"Configuration",configTitle:"OntoWave - Configuration Compl√®te",configGeneral:"G√©n√©ral",configSiteTitle:"Titre du site :",configDefaultPage:"Page par d√©faut :",configBaseUrl:"URL de base :",configLanguages:"Langues et Localisation",configSupportedLanguages:"Langues support√©es (s√©par√©es par des virgules) :",configFallbackLanguage:"Langue de fallback :",configNavigation:"Navigation et Interface",configShowGallery:"Afficher la galerie d'exemples",configHomeButton:"Bouton Accueil",configBreadcrumb:"Fil d'Ariane (breadcrumb)",configToc:"Table des mati√®res",configMermaid:"Diagrammes Mermaid",configMermaidTheme:"Th√®me Mermaid :",configMermaidAuto:"D√©marrage automatique",configMermaidMaxWidth:"Utiliser la largeur maximale",configPlantuml:"Diagrammes PlantUML",configPlantumlServer:"Serveur PlantUML :",configPlantumlFormat:"Format de sortie :",configPrism:"Coloration Syntaxique (Prism.js)",configPrismTheme:"Th√®me Prism :",configPrismAutoload:"Chargement automatique",configUI:"Interface Utilisateur",configUITheme:"Th√®me de l'interface :",configUIResponsive:"Design responsive",configUIAnimations:"Animations et transitions",configApply:"Appliquer Configuration",configDownloadHTML:"T√©l√©charger HTML",configDownloadJS:"T√©l√©charger ontowave.min.js",configReset:"R√©initialiser",configLanguageNote:"Laissez vide pour un site monolingue"},en:{menuHome:"Home",menuGallery:"Gallery",menuConfiguration:"Configuration",configTitle:"OntoWave - Complete Configuration",configGeneral:"General",configSiteTitle:"Site title:",configDefaultPage:"Default page:",configBaseUrl:"Base URL:",configLanguages:"Languages and Localization",configSupportedLanguages:"Supported languages (comma separated):",configFallbackLanguage:"Fallback language:",configNavigation:"Navigation and Interface",configShowGallery:"Show examples gallery",configHomeButton:"Home button",configBreadcrumb:"Breadcrumb navigation",configToc:"Table of contents",configMermaid:"Mermaid Diagrams",configMermaidTheme:"Mermaid theme:",configMermaidAuto:"Auto start",configMermaidMaxWidth:"Use maximum width",configPlantuml:"PlantUML Diagrams",configPlantumlServer:"PlantUML server:",configPlantumlFormat:"Output format:",configPrism:"Syntax Highlighting (Prism.js)",configPrismTheme:"Prism theme:",configPrismAutoload:"Auto loading",configUI:"User Interface",configUITheme:"Interface theme:",configUIResponsive:"Responsive design",configUIAnimations:"Animations and transitions",configApply:"Apply Configuration",configDownloadHTML:"Download HTML",configDownloadJS:"Download ontowave.min.js",configReset:"Reset",configLanguageNote:"Leave empty for monolingual site"}},t={title:"OntoWave Documentation",baseUrl:"/",defaultPage:"index.md",containerId:"ontowave-container",locales:["fr","en"],fallbackLocale:"en",showGallery:!1,mermaid:{theme:"default",startOnLoad:!0,flowchart:{useMaxWidth:!0},sequence:{useMaxWidth:!0},gantt:{useMaxWidth:!0},journey:{useMaxWidth:!0}},plantuml:{server:"https://www.plantuml.com/plantuml",format:"svg"},prism:{theme:"default",autoload:!0},navigation:{showHome:!0,showBreadcrumb:!0,showToc:!0},ui:{theme:"default",responsive:!0,animations:!0}};class n{constructor(e={}){this.config={...t,...e},e.i18n&&(e.i18n.supported&&(this.config.locales=e.i18n.supported),e.i18n.default)&&(this.config.fallbackLocale=e.i18n.default),this.container=null,this.mermaidLoaded=!1,this.prismLoaded=!1,this.currentPage=null,this.currentLanguage=null}getCurrentLanguage(){if(this.currentLanguage)return this.currentLanguage;var e=document.getElementById("lang-fr"),t=document.getElementById("lang-en");if(e&&t){if(e.classList.contains("visible")||!e.classList.contains("hidden")&&"none"!==e.style.display)return"fr";if(t.classList.contains("visible")||!t.classList.contains("hidden")&&"none"!==t.style.display)return"en"}e=document.getElementById("btn-fr"),t=document.getElementById("btn-en");if(e&&t){if(e.classList.contains("active"))return"fr";if(t.classList.contains("active"))return"en"}return this.resolveLocale()||"en"}t(e,t=null){t=t||this.getCurrentLanguage();return(o[t]||o.en)[e]||e}updateInterfaceTexts(e=null){let t=e||this.getCurrentLanguage();console.log("üåê Interface texts updating for language:",t);e=document.querySelector('.ontowave-menu-option[onclick*="goHome"]'),e&&(e.innerHTML="üè† "+this.t("menuHome",t)),e=document.querySelector('.ontowave-menu-option[onclick*="gallery.html"]'),e&&(e.innerHTML="üé® "+this.t("menuGallery",t)),e=document.querySelector('.ontowave-menu-option[onclick*="toggleConfigurationPanel"]'),e&&(e.innerHTML="‚öôÔ∏è "+this.t("menuConfiguration",t)),e=document.getElementById("ontowave-config-panel");if(e){let n=document.getElementById("config-title-full")?.value||this.config.title,i=document.getElementById("config-defaultPage-full")?.value||this.config.defaultPage,a=document.getElementById("config-baseUrl-full")?.value||this.config.baseUrl;e.remove();e=document.querySelector('.ontowave-menu-option[onclick*="toggleConfigurationPanel"]');e&&e.classList.remove("selected"),setTimeout(()=>{this.toggleConfigurationPanel(null,t),setTimeout(()=>{var e=document.getElementById("config-title-full"),t=document.getElementById("config-defaultPage-full"),o=document.getElementById("config-baseUrl-full");e&&(e.value=n),t&&(t.value=i),o&&(o.value=a)},100)},50)}console.log("üåê Interface texts updated for language:",t)}switchLanguage(t){this.currentLanguage=t,document.querySelectorAll(".ontowave-lang-btn").forEach(e=>{e.classList.remove("active"),e.textContent.includes(t.toUpperCase())&&e.classList.add("active")}),this.updateInterfaceTexts(t);var e=(this.config.sources||{})[t]||this.config.defaultPage;e&&this.loadPage(e)}goHome(){var e=this.getCurrentLanguage(),e=(this.config.sources||{})[e]||this.config.defaultPage;this.loadPage(e)}getBrowserLocales(){var e=[];return navigator.languages&&e.push(...navigator.languages),navigator.language&&e.push(navigator.language),navigator.userLanguage&&e.push(navigator.userLanguage),[...new Set(e)]}resolveLocale(){var e,o,t=this.getBrowserLocales(),n=this.config.locales||[],i=this.config.defaultLocale||this.config.fallbackLocale;if(console.log("üåê Browser locales:",t),console.log("üåê Supported locales:",n),console.log("üåê Default locale:",i),0===n.length)return null;if(i&&n.includes(i))return console.log("üéØ Using configured default locale:",i),i;for(e of t)if(n.includes(e))return console.log("üéØ Exact browser match found:",e),e;for(o of t){let t=o.split("-")[0];var a=n.find(e=>e.startsWith(t));if(a)return console.log("üéØ Prefix match found:",o,"->",a),a}i=n[0];return console.log("üéØ Using fallback locale:",i),i}generatePageCandidates(e){var t,o=this.resolveLocale(),n=[];return o?(t=e.replace(/\.md$/,""),n.push(t+`.${o}.md`),o.includes("-")&&(o=o.split("-")[0],n.push(t+`.${o}.md`)),n.push(e),console.log("üìÑ Page candidates for",e,":",n)):n.push(e),n}async init(){try{await this.loadConfigFromScript(),this.injectStyles(),await this.loadMermaid(),await this.loadPrism(),this.createInterface(),this.currentLanguage=this.resolveLocale(),this.initializeNavigation(),await this.loadInitialPage(),console.log("‚úÖ OntoWave successfully initialized")}catch(e){console.error("‚ùå OntoWave initialization failed:",e),this.showError("Erreur d'initialisation OntoWave: "+e.message)}}async loadConfigFromScript(){var e=document.getElementById("ontowave-config");if(e&&"application/json"===e.type)try{var t=JSON.parse(e.textContent);this.config={...this.config,...t},console.log("üìÑ Configuration loaded from script tag")}catch(e){console.warn("‚ö†Ô∏è Invalid JSON in ontowave-config script tag:",e)}}injectStyles(){var e=document.createElement("style");e.textContent=`
    .ontowave-container {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif;
      line-height: 1.6;
      color: #24292e;
      background: #fff;
      margin: 0;
      padding: 20px;
      min-height: 100vh;
    }
    
    /* Menu flottant minimal d√©pla√ßable */
    .ontowave-floating-menu {
      position: fixed;
      top: 20px;
      left: 20px;
      z-index: 1000;
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      border: 1px solid #e1e4e8;
      border-radius: 44px;
      padding: 10px;
      box-shadow: 0 4px 12px rgba(27,31,35,0.15);
      cursor: move;
      transition: all 0.3s ease;
      font-size: 1.2em;
      user-select: none;
      display: flex;
      align-items: center;
      gap: 0;
      width: 44px;
      height: 44px;
      overflow: visible;
      white-space: nowrap;
    }
    
    .ontowave-floating-menu.no-drag {
      cursor: default;
    }
    
    .ontowave-floating-menu.expanded {
      width: auto;
      height: auto;
      min-height: 44px;
      border-radius: 22px;
      padding: 10px 18px;
      gap: 10px;
    }
    
    .ontowave-floating-menu:hover {
      transform: scale(1.05);
      box-shadow: 0 6px 20px rgba(27,31,35,0.25);
    }
    
    /* D√©sactiver le zoom quand le panneau de configuration est ouvert */
    .ontowave-floating-menu.has-config-panel:hover {
      transform: none;
    }
    
    .ontowave-menu-icon {
      cursor: pointer;
      transition: transform 0.3s ease;
      flex-shrink: 0;
      width: 30px;
      height: 30px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.4em;
      text-align: center;
      line-height: 1;
      margin: 0 auto;
    }
    
    .ontowave-menu-icon:hover {
      transform: scale(1.2);
    }
    
    .ontowave-menu-content {
      display: flex;
      align-items: center;
      gap: 15px;
      opacity: 0;
      width: 0;
      overflow: hidden;
      transition: all 0.3s ease;
      white-space: nowrap;
    }
    
    .ontowave-floating-menu.expanded .ontowave-menu-content {
      opacity: 1;
      width: auto;
      overflow: visible;
    }
    
    .ontowave-menu-brand {
      font-weight: 600;
      color: #0969da;
      text-decoration: none;
      cursor: pointer;
      font-size: 0.9em;
    }
    
    .ontowave-menu-brand:hover {
      color: #0550ae;
    }
    
    .org-suffix {
      font-size: 0.7em;
      opacity: 0.7;
      font-weight: normal;
    }
    
    .ontowave-menu-options {
      display: flex;
      gap: 8px;
      flex-wrap: nowrap;
    }
    
    .ontowave-menu-option {
      padding: 6px 10px;
      background: #f8f9fa;
      border: 1px solid #d0d7de;
      border-radius: 15px;
      font-size: 0.75em;
      cursor: pointer;
      transition: all 0.2s ease;
      white-space: nowrap;
      pointer-events: auto;
    }
    
    .ontowave-menu-option:hover {
      background: #e2e8f0;
      transform: translateY(-1px);
    }
    
    .ontowave-menu-option.selected {
      background: #0969da;
      color: white;
      border-color: #0969da;
      box-shadow: 0 2px 8px rgba(9, 105, 218, 0.3);
    }
    
    .ontowave-menu-option.selected:hover {
      background: #0550ae;
      border-color: #0550ae;
      transform: translateY(-1px);
    }
    
    /* Styles pour les boutons de langue */
    .ontowave-lang-btn {
      font-weight: bold;
      font-size: 11px;
    }
    
    .ontowave-lang-btn.active {
      background: #28a745;
      color: white;
      border-color: #28a745;
      box-shadow: 0 2px 8px rgba(40, 167, 69, 0.3);
    }
    
    .ontowave-lang-btn.active:hover {
      background: #1e7e34;
      border-color: #1e7e34;
    }
    
    /* Pas d'en-t√™te - supprim√© */
    .ontowave-header {
      display: none;
    }
    
    .ontowave-nav {
      background: #f8f9fa;
      border: 1px solid #e1e4e8;
      border-radius: 8px;
      padding: 1.5rem;
      margin-bottom: 2rem;
    }
    
    .ontowave-nav h3 {
      margin: 0 0 1rem 0;
      color: #24292e;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }
    
    .ontowave-nav-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1rem;
    }
    
    .ontowave-nav-item {
      padding: 1rem;
      background: white;
      border: 1px solid #d0d7de;
      border-radius: 6px;
      text-decoration: none;
      color: #24292e;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      transition: all 0.2s ease;
      font-weight: 500;
      cursor: pointer;
    }
    
    .ontowave-nav-item:hover {
      background: #f3f4f6;
      border-color: #0969da;
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(27,31,35,0.15);
    }
    
    .ontowave-content {
      background: white;
      padding: 2rem;
      border-radius: 8px;
      box-shadow: 0 2px 8px rgba(27,31,35,0.15);
      border: 1px solid #e1e4e8;
      margin-bottom: 2rem;
      min-height: 300px;
      max-width: 1200px;
      margin-left: auto;
      margin-right: auto;
    }
    
    /* Headers corrig√©s */
    .ontowave-content h1 {
      color: #24292e;
      border-bottom: 2px solid #e1e4e8;
      padding-bottom: 8px;
      margin-bottom: 16px;
      font-size: 2em;
      font-weight: 600;
    }
    
    .ontowave-content h2 {
      color: #24292e;
      margin-top: 24px;
      margin-bottom: 16px;
      font-size: 1.5em;
      font-weight: 600;
    }
    
    .ontowave-content h3 {
      color: #24292e;
      margin-top: 20px;
      margin-bottom: 12px;
      font-size: 1.25em;
      font-weight: 600;
    }
    
    /* S√©parateurs hr */
    .ontowave-content hr {
      border: none;
      border-top: 1px solid #e1e4e8;
      margin: 24px 0;
    }
    
    /* Mermaid diagrams */
    .ontowave-mermaid {
      margin: 20px 0;
      padding: 20px;
      background: #f8f9fa;
      border: 1px solid #e1e4e8;
      border-radius: 8px;
      text-align: center;
    }
    
    .ontowave-loading {
      text-align: center;
      color: #666;
      padding: 2rem;
    }
    
    .ontowave-error {
      color: #d73a49;
      text-align: center;
      padding: 2rem;
      background: #ffeef0;
      border: 1px solid #fdaeb7;
      border-radius: 6px;
    }
    
    .ontowave-mermaid {
      background: #f6f8fa;
      border: 1px solid #d0d7de;
      border-radius: 6px;
      padding: 1rem;
      margin: 1rem 0;
      text-align: center;
    }
    
    .ontowave-plantuml {
      background: #f6f8fa;
      border: 1px solid #d0d7de;
      border-radius: 6px;
      padding: 1rem;
      margin: 1rem 0;
      text-align: center;
    }
    
    .ontowave-plantuml img {
      max-width: 100%;
      height: auto;
    }
    
    .ontowave-code {
      background: #f6f8fa;
      border: 1px solid #d0d7de;
      border-radius: 6px;
      padding: 1rem;
      margin: 1rem 0;
      overflow-x: auto;
      font-family: ui-monospace, SFMono-Regular, monospace;
    }
    
    .ontowave-breadcrumb {
      padding: 0.5rem 0;
      margin-bottom: 1rem;
      border-bottom: 1px solid #e1e4e8;
    }
    
    .ontowave-breadcrumb a {
      color: #0969da;
      text-decoration: none;
      margin-right: 0.5rem;
    }
    
    .ontowave-breadcrumb a:hover {
      text-decoration: underline;
    }
    
    .ontowave-breadcrumb span {
      color: #656d76;
      margin-right: 0.5rem;
    }
    
    .ontowave-status {
      background: #d4edda;
      border: 1px solid #c3e6cb;
      border-radius: 8px;
      padding: 1rem;
      margin-top: 2rem;
    }
    
    .ontowave-status h4 {
      margin: 0 0 0.5rem 0;
      color: #155724;
    }
    
    .ontowave-status ul {
      margin: 0;
      padding-left: 1.5rem;
      color: #155724;
    }
    
    @media (max-width: 768px) {
      .ontowave-header {
        padding: 1rem;
      }
      
      .ontowave-header h1 {
        font-size: 2em;
      }
      
      .ontowave-nav-grid {
        grid-template-columns: 1fr;
      }
      
      .ontowave-content {
        padding: 1rem;
      }
    }
  `,document.head.appendChild(e)}async loadMermaid(){return new Promise(e=>{var t;c.mermaid?(this.mermaidLoaded=!0,this.initializeMermaid(),e()):((t=document.createElement("script")).src="https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.min.js",t.onload=()=>{this.mermaidLoaded=!0,this.initializeMermaid(),e()},t.onerror=()=>{console.warn("‚ö†Ô∏è Failed to load Mermaid library"),e()},document.head.appendChild(t))})}initializeMermaid(){c.mermaid&&(c.mermaid.initialize(this.config.mermaid),console.log("üé® Mermaid initialized"))}async loadPrism(){return new Promise(n=>{if(c.Prism)return this.prismLoaded=!0,console.log("üé® Prism already loaded"),n();var e=document.createElement("link"),e=(e.rel="stylesheet",e.href="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism.min.css",document.head.appendChild(e),document.createElement("script"));e.src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-core.min.js",e.onload=()=>{console.log("üé® Prism core loaded");let e=["markup","css","javascript"],t=0,o=()=>{t++,console.log(`üî§ Essential language loaded: ${t}/`+e.length),t>=e.length&&(c.Prism.languages.markup&&(c.Prism.languages.html=c.Prism.languages.markup,console.log("üî§ HTML alias created from markup")),this.prismLoaded=!0,console.log("‚úÖ Prism ready with essential languages"),n(),["python","java","bash","json","yaml","typescript"].forEach(e=>{var t=document.createElement("script");t.src=`https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-${e}.min.js`,t.onload=()=>{console.log("üî§ Additional Prism language loaded: "+e)},t.onerror=()=>{console.warn("‚ö†Ô∏è Failed to load Prism language: "+e)},document.head.appendChild(t)}))};e.forEach(e=>{var t=document.createElement("script");t.src=`https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-${e}.min.js`,t.onload=o,t.onerror=()=>{console.warn("‚ö†Ô∏è Failed to load essential Prism language: "+e),o()},document.head.appendChild(t)})},e.onerror=()=>{console.warn("‚ö†Ô∏è Failed to load Prism library"),n()},document.head.appendChild(e)})}createInterface(t=null){this.container=document.getElementById(this.config.containerId),this.container||(this.container=document.createElement("div"),this.container.id=this.config.containerId,document.body.appendChild(this.container)),this.container.className="ontowave-container";var e=this.config.showGallery?`<span class="ontowave-menu-option" onclick="window.location.href='gallery.html'">üé® ${this.t("menuGallery",t)}</span>`:"",o=this.config.locales&&1<this.config.locales.length?this.config.locales.map(e=>`<span class="ontowave-menu-option ontowave-lang-btn${(t||this.getCurrentLanguage())===e?" active":""}" onclick="event.stopPropagation(); window.OntoWave.instance.switchLanguage('${e}');">üåê ${e.toUpperCase()}</span>`).join(""):"";this.container.innerHTML=`
        <div class="ontowave-floating-menu" id="ontowave-floating-menu" title="OntoWave Menu">
          <span class="ontowave-menu-icon" id="ontowave-menu-icon">&#127754;</span>
          <div class="ontowave-menu-content" id="ontowave-menu-content">
            <a href="https://ontowave.org/" target="_blank" class="ontowave-menu-brand">OntoWave<span class="org-suffix">.org</span></a>
            <div class="ontowave-menu-options">
              <span class="ontowave-menu-option" onclick="window.OntoWave.instance.goHome()">üè† ${this.t("menuHome",t)}</span>
              ${e}
              ${o}
              <span class="ontowave-menu-option" onclick="event.stopPropagation(); window.OntoWave.instance.toggleConfigurationPanel(event, '${t||this.getCurrentLanguage()}');">‚öôÔ∏è ${this.t("menuConfiguration",t)}</span>
            </div>
          </div>
        </div>
        
        <div class="ontowave-content" id="ontowave-content">
          <div class="ontowave-loading">‚è≥ Chargement du contenu...</div>
        </div>
        
        <div class="ontowave-status" style="display: none;">
          <h4>‚úÖ OntoWave Package Actif</h4>
          <ul>
            <li><strong>Chargement rapide:</strong> Syst√®me int√©gr√©</li>
            <li><strong>Mermaid:</strong> ${this.mermaidLoaded?"Charg√©":"Non disponible"}</li>
            <li><strong>Prism:</strong> ${this.prismLoaded?"Charg√©":"Non disponible"}</li>
            <li><strong>PlantUML:</strong> Support int√©gr√©</li>
            <li><strong>Navigation:</strong> Hash pr√©serv√©</li>
          </ul>
        </div>
      `}initializeNavigation(){c.addEventListener("hashchange",()=>{var e=location.hash.replace("#","")||this.config.defaultPage;this.loadPage(e)}),this.createDefaultNavigation(),this.initializeFloatingMenu()}initializeFloatingMenu(){let l=document.getElementById("ontowave-floating-menu");var e=document.getElementById("ontowave-menu-icon");if(l&&e){let o=!1,i=!1,a={x:0,y:0};function t(){!o&&!document.querySelector(".ontowave-config-panel")?l.classList.remove("no-drag"):(l.classList.add("no-drag"),i=!1,document.body.style.userSelect="",document.body.style.cursor="")}function n(){i=!1,l.style.cursor="move",document.body.style.userSelect="",document.body.style.cursor=""}c.ontowaveUpdateDragState=t,e.addEventListener("click",e=>{e.stopPropagation(),(o=!o)?l.classList.add("expanded"):l.classList.remove("expanded"),t()}),document.addEventListener("click",e=>{!l.contains(e.target)&&o&&(o=!1,l.classList.remove("expanded"),t())}),l.addEventListener("mousedown",e=>{var t;o||document.querySelector(".ontowave-config-panel")||e.target.closest("a, .ontowave-menu-option")||(i=!0,t=l.getBoundingClientRect(),a.x=e.clientX-t.left,a.y=e.clientY-t.top,l.style.cursor="grabbing",document.body.style.userSelect="none",e.preventDefault(),e.stopPropagation())}),document.addEventListener("mousemove",e=>{var t,o,n;i&&(t=e.clientX-a.x,e=e.clientY-a.y,o=c.innerWidth-l.offsetWidth,n=c.innerHeight-l.offsetHeight,l.style.left=Math.max(0,Math.min(o,t))+"px",l.style.top=Math.max(0,Math.min(n,e))+"px")}),document.addEventListener("mouseup",()=>{i&&(i=!1,l.style.cursor="move",document.body.style.userSelect="")}),document.addEventListener("visibilitychange",n),c.addEventListener("blur",n),c.addEventListener("focus",n),c.resetOntoWaveDragState=n,l.addEventListener("touchstart",e=>{var t;e.target.closest("a, .ontowave-menu-option")||(e=e.touches[0],t=l.getBoundingClientRect(),a.x=e.clientX-t.left,a.y=e.clientY-t.top,i=!0)}),document.addEventListener("touchmove",e=>{var t,o,n;i&&(e.preventDefault(),t=(e=e.touches[0]).clientX-a.x,e=e.clientY-a.y,o=c.innerWidth-l.offsetWidth,n=c.innerHeight-l.offsetHeight,l.style.left=Math.max(0,Math.min(o,t))+"px",l.style.top=Math.max(0,Math.min(n,e))+"px")}),document.addEventListener("touchend",()=>{i=!1}),t(),this.enhanceMenuOptionClicks()}}enhanceMenuOptionClicks(){var e=document.querySelector('.ontowave-menu-option[onclick*="toggleConfigurationPanel"]');e&&e.addEventListener("click",e=>{e.preventDefault(),e.stopPropagation(),console.log("Configuration button clicked via event listener"),this.toggleConfigurationPanel(e)},{capture:!0})}createDefaultNavigation(){var e=document.getElementById("ontowave-nav-grid");e&&(e.innerHTML=[{href:"index.md",icon:"üè†",label:"Accueil"},{href:"en/index.md",icon:"üá¨üáß",label:"English"},{href:"fr/index.md",icon:"üá´üá∑",label:"Fran√ßais"},{href:"demo/mermaid.md",icon:"üßú‚Äç‚ôÄÔ∏è",label:"D√©mo Mermaid"},{href:"demo/plantuml.md",icon:"üè≠",label:"PlantUML"},{href:"demo/advanced-shapes.md",icon:"üéØ",label:"Formes Avanc√©es"}].map(e=>`
        <a href="#${e.href}" class="ontowave-nav-item" onclick="window.OntoWave.loadPage('${e.href}')">
          ${e.icon} ${e.label}
        </a>
      `).join(""))}async loadInitialPage(){var t,o=location.hash.replace("#","")||this.config.defaultPage;if("index.md"===o){let e=!1;for(t of this.generatePageCandidates(o))try{if((await fetch(this.config.baseUrl+t,{method:"HEAD"})).ok){await this.loadPage(t),e=!0;break}}catch(e){continue}e||(console.log("üìÑ No index file found, showing configuration"),this.showConfigurationInterface())}else await this.loadPage(o)}async loadPage(t){var e=document.getElementById("ontowave-content");if(e){console.log("üìÑ Loading page:",t),this.currentPage=t,c.resetOntoWaveDragState&&c.resetOntoWaveDragState(),location.hash!=="#"+t&&(location.hash="#"+t),this.updateBreadcrumb(t),e.innerHTML='<div class="ontowave-loading">‚è≥ Chargement de '+t+"...</div>";try{var o=await fetch(this.config.baseUrl+t);if(!o.ok)throw new Error(`HTTP ${o.status}: `+o.statusText);var n=await o.text(),i=(console.log("‚úÖ Content loaded:",n.length,"characters"),await this.renderMarkdown(n));e.innerHTML=i,await this.processDiagrams(e),await this.processPrism(e)}catch(e){console.error("‚ùå Failed to load page:",e),this.showError(`Impossible de charger ${t}: `+e.message)}}}updateBreadcrumb(e){var t=document.getElementById("ontowave-breadcrumb");if(t&&this.config.navigation.showBreadcrumb){let o=e.split("/"),n=['<a href="#'+this.config.defaultPage+'">üè† Accueil</a>'],i="";o.forEach((e,t)=>{t===o.length-1?n.push("<span>"+e.replace(".md","")+"</span>"):(i+=(i?"/":"")+e,n.push('<a href="#'+i+'/index.md">'+e+"</a>"))}),t.innerHTML=n.join(" <span>‚Ä∫</span> "),t.style.display="block"}}async renderMarkdown(e){let o=e,l=[];return o=(o=o.replace(/```(\w+)([\s\S]*?)```/g,(e,t,o)=>{var n,i,o=o.trim(),a=`__CODE_BLOCK_${l.length}__`;return"mermaid"===t?(i="mermaid-"+Math.random().toString(36).substr(2,9),l.push(`<div class="ontowave-mermaid">
            <div style="margin-bottom: 8px; font-weight: bold; color: #586069;">üßú‚Äç‚ôÄÔ∏è Diagramme Mermaid</div>
            <div class="mermaid" id="${i}">${o}</div>
          </div>`)):"plantuml"===t?(i="plantuml-"+Math.random().toString(36).substr(2,9),n=btoa(unescape(encodeURIComponent(o))).replace(/\+/g,"-").replace(/\//g,"_").replace(/=/g,""),n=`${this.config.plantuml.server}/${this.config.plantuml.format}/~1`+n,l.push(`<div class="ontowave-plantuml" id="${i}">
            <div style="margin-bottom: 8px; font-weight: bold; color: #586069;">üè≠ Diagramme PlantUML</div>
            <img src="${n}" alt="Diagramme PlantUML" style="max-width: 100%; height: auto;" 
                 onerror="this.parentElement.innerHTML='<div style=\\'color: #d73a49; padding: 20px;\\'>‚ùå Erreur de rendu PlantUML</div>'" />
          </div>`)):(i=this.prismLoaded?"language-"+t:"",console.log(`üìù Processing code block: language="${t}", prismLoaded=${this.prismLoaded}, class="${i}"`),l.push(`<pre class="ontowave-code"><code class="${i}">${o}</code></pre>`)),a})).replace(/^### (.+)$/gm,"<h3>$1</h3>").replace(/^## (.+)$/gm,"<h2>$1</h2>").replace(/^# (.+)$/gm,"<h1>$1</h1>").replace(/^---+$/gm,"<hr>").replace(/!\[([^\]]*)\]\(([^)]+)\)/g,'<img src="$2" alt="$1">').replace(/\[([^\]]+)\]\(([^)]+\.html[^)]*)\)/g,'<a href="$2">$1</a>').replace(/\[([^\]]+)\]\((https?:\/\/[^)]+)\)/g,'<a href="$2" target="_blank">$1</a>').replace(/\[([^\]]+)\]\(([^)]+\.(tar\.gz|zip|pdf|doc|docx|xls|xlsx|ppt|pptx|txt|csv|json|xml|js|css|png|jpg|jpeg|gif|svg|webp)[^)]*)\)/g,'<a href="$2" download>$1</a>').replace(/\[([^\]]+)\]\(([^)]+)\)/g,'<a href="#$2" onclick="window.OntoWave.loadPage(\'$2\')">$1</a>').replace(/\*\*(.+?)\*\*/g,"<strong>$1</strong>").replace(/\*(.+?)\*/g,"<em>$1</em>").replace(/`([^`]+)`/g,"<code>$1</code>").split("\n\n").map(e=>e.trim()).filter(e=>0<e.length).map(e=>e.match(/^<(h[1-6]|hr|div|pre)/)?e:`<p>${e.replace(/\n/g,"<br>")}</p>`).join("\n"),l.forEach((e,t)=>{o=o.replace(`__CODE_BLOCK_${t}__`,e)}),o}async processDiagrams(t){if(this.mermaidLoaded&&c.mermaid){let o=t.querySelectorAll(".mermaid");if(0!==o.length){console.log("üé® Processing",o.length,"Mermaid diagrams");try{o.forEach(e=>{e.removeAttribute("data-processed")}),await c.mermaid.run(),console.log("‚úÖ Mermaid diagrams rendered successfully"),setTimeout(()=>{var e=t.querySelectorAll(".mermaid svg");console.log("üé® SVG elements found:",e.length),0===e.length&&0<o.length&&(console.log("‚ö†Ô∏è Retrying Mermaid rendering..."),o.forEach(e=>{e.removeAttribute("data-processed")}),c.mermaid.init(void 0,o))},1e3)}catch(t){console.error("‚ùå Mermaid rendering error:",t),o.forEach(e=>{e.querySelector("svg")||(e.innerHTML=`<div style="color: #d73a49; padding: 10px;">‚ùå Erreur de rendu Mermaid: ${t.message}</div><pre style="background: #f8f8f8; padding: 10px; margin-top: 10px; border-radius: 4px;"><code>${e.textContent}</code></pre>`)})}}}}async processPrism(e){if(console.log("üîç processPrism called - prismLoaded:",this.prismLoaded,"window.Prism:",!!c.Prism),c.Prism)try{console.log("üî§ Available Prism languages:",c.Prism.languages?Object.keys(c.Prism.languages):"none");var t=e.querySelectorAll('code[class*="language-"]'),o=(console.log("üé® Found",t.length,"code blocks with language classes"),t.forEach((e,t)=>{console.log(`üîç Code block ${t}:`),console.log(`  - class: "${e.className}"`),console.log("  - content length: "+e.textContent?.length),console.log(`  - content preview: "${e.textContent?.substring(0,50)}..."`),console.log("  - parent visible: "+("none"!==c.getComputedStyle(e.parentElement).display)),console.log("  - element visible: "+("none"!==c.getComputedStyle(e).display))}),e.querySelectorAll("code"));if(console.log("üìù Total code blocks found:",o.length),0<t.length){var n=t[0];console.log("üß™ Testing manual highlighting on first element...");var i=n.className.split(" ").find(e=>e.startsWith("language-")),a=i?i.replace("language-",""):"unknown";if(console.log(`üî§ Language detected: "${a}"`),console.log("üî§ Language available in Prism: "+!(!c.Prism.languages||!c.Prism.languages[a])),c.Prism.languages&&c.Prism.languages[a]){console.log("üß™ Attempting manual highlight...");var l=n.textContent;try{var r=c.Prism.highlight(l,c.Prism.languages[a],a);console.log("üé® Manual highlight result length: "+r.length),console.log(`üé® Manual highlight preview: "${r.substring(0,100)}..."`),n.innerHTML=r,console.log("‚úÖ Manual highlight applied")}catch(e){console.error("‚ùå Manual highlight failed:",e)}}c.Prism.highlightAllUnder(e),console.log("‚úÖ Prism syntax highlighting applied to",t.length,"blocks");var s=e.querySelectorAll(".token");console.log("üé® Tokens created after highlighting:",s.length),0<s.length&&s.forEach((e,t)=>{console.log(`Token ${t}: "${e.textContent}" (class: ${e.className})`)})}else console.log("‚ö†Ô∏è No code blocks with language classes found for Prism")}catch(e){console.error("‚ùå Prism highlighting error:",e)}else console.log("üé® Prism not available, skipping syntax highlighting")}showConfigurationInterface(){var e,t=document.getElementById("ontowave-content");t&&(e=JSON.stringify(this.config,null,2).replace(/"/g,"&quot;").replace(/</g,"&lt;").replace(/>/g,"&gt;"),t.innerHTML=`
        <div class="ontowave-config-interface">
          <div class="config-header">
            <h1>üåä OntoWave Configuration</h1>
            <p>Aucun fichier index trouv√©. Configurez OntoWave pour votre projet :</p>
          </div>
          
          <div class="config-content">
            <div class="config-form">
              <h2>üìù Configuration</h2>
              
              <div class="form-group">
                <label for="config-title">Titre du site :</label>
                <input type="text" id="config-title" />
              </div>
              
              <div class="form-group">
                <label for="config-defaultPage">Page par d√©faut :</label>
                <input type="text" id="config-defaultPage" />
              </div>
              
              <div class="form-group">
                <label for="config-locales">Langues support√©es (s√©par√©es par des virgules) :</label>
                <input type="text" id="config-locales" placeholder="fr-CA, fr, en" />
              </div>
              
              <div class="form-group">
                <label>
                  <input type="checkbox" id="config-showGallery" />
                  Afficher la galerie d'exemples
                </label>
              </div>
              
              <div class="form-group">
                <label for="config-mermaidTheme">Th√®me Mermaid :</label>
                <select id="config-mermaidTheme">
                  <option value="default">Default</option>
                  <option value="dark">Dark</option>
                  <option value="forest">Forest</option>
                  <option value="neutral">Neutral</option>
                </select>
              </div>
              
              <div class="form-actions">
                <button onclick="window.OntoWave.instance.updateConfigFromForm()">‚úÖ Appliquer</button>
                <button onclick="window.OntoWave.instance.downloadConfig()">üíæ T√©l√©charger HTML</button>
                <button onclick="window.OntoWave.instance.resetConfig()">üîÑ Reset</button>
              </div>
            </div>
            
            <div class="config-code">
              <h2>üíª Code HTML g√©n√©r√©</h2>
              <div class="code-preview">
                <pre><code id="generated-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;${this.config.title}&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;script src="ontowave.min.js"&gt;&lt;/script&gt;
    &lt;script type="application/json" id="ontowave-config"&gt;
${e}
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
              </div>
              
              <div class="usage-info">
                <h3>üìã Instructions d'utilisation</h3>
                <ol>
                  <li>Configurez les options dans le formulaire</li>
                  <li>Cliquez sur "T√©l√©charger HTML" pour obtenir votre fichier</li>
                  <li>Placez vos fichiers .md dans le m√™me dossier</li>
                  <li>Ouvrez le fichier HTML dans votre navigateur</li>
                </ol>
                
                <h3>üåê Gestion des langues</h3>
                <ul>
                  <li><strong>Monolingue :</strong> Laissez "Langues support√©es" vide</li>
                  <li><strong>Multilingue :</strong> Ajoutez les codes de langue (ex: fr, en, fr-CA)</li>
                  <li><strong>Fichiers :</strong> index.fr.md, index.en.md, etc.</li>
                  <li><strong>Fallback :</strong> index.md si aucune langue trouv√©e</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      `,this.addConfigStyles(),this.populateConfigForm(),this.updateGeneratedCode())}populateConfigForm(){var e=document.getElementById("config-title"),t=document.getElementById("config-defaultPage"),o=document.getElementById("config-locales"),n=document.getElementById("config-showGallery"),i=document.getElementById("config-mermaidTheme");e&&(e.value=this.config.title),t&&(t.value=this.config.defaultPage),o&&(o.value=this.config.locales.join(", ")),n&&(n.checked=this.config.showGallery),i&&(i.value=this.config.mermaid.theme)}addConfigStyles(){var e;document.getElementById("ontowave-config-styles")||((e=document.createElement("style")).id="ontowave-config-styles",e.textContent=`
        .ontowave-config-interface {
          max-width: 1200px;
          margin: 0 auto;
          padding: 20px;
          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        .config-header {
          text-align: center;
          margin-bottom: 40px;
        }
        
        .config-header h1 {
          color: #0969da;
          margin-bottom: 10px;
        }
        
        .config-content {
          display: grid;
          grid-template-columns: 1fr 1fr;
          gap: 40px;
          align-items: start;
        }
        
        .config-form {
          background: #f8f9fa;
          padding: 30px;
          border-radius: 12px;
          border: 1px solid #e1e4e8;
        }
        
        .config-code {
          background: #ffffff;
          padding: 30px;
          border-radius: 12px;
          border: 1px solid #e1e4e8;
        }
        
        .form-group {
          margin-bottom: 20px;
        }
        
        .form-group label {
          display: block;
          font-weight: 600;
          margin-bottom: 8px;
          color: #24292e;
        }
        
        .form-group input, .form-group select {
          width: 100%;
          padding: 10px;
          border: 1px solid #d0d7de;
          border-radius: 6px;
          font-size: 14px;
        }
        
        .form-group input[type="checkbox"] {
          width: auto;
          margin-right: 8px;
        }
        
        .form-actions {
          display: flex;
          gap: 10px;
          margin-top: 30px;
        }
        
        .form-actions button {
          flex: 1;
          padding: 12px 20px;
          border: none;
          border-radius: 6px;
          font-weight: 600;
          cursor: pointer;
          transition: all 0.2s ease;
        }
        
        .form-actions button:first-child {
          background: #28a745;
          color: white;
        }
        
        .form-actions button:nth-child(2) {
          background: #0969da;
          color: white;
        }
        
        .form-actions button:last-child {
          background: #6c757d;
          color: white;
        }
        
        .form-actions button:hover {
          transform: translateY(-1px);
          box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        .code-preview {
          background: #f6f8fa;
          border: 1px solid #e1e4e8;
          border-radius: 6px;
          padding: 16px;
          overflow-x: auto;
          margin-bottom: 20px;
        }
        
        .code-preview pre {
          margin: 0;
          font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
          font-size: 13px;
          line-height: 1.4;
        }
        
        .usage-info h3 {
          color: #0969da;
          margin-top: 25px;
          margin-bottom: 10px;
        }
        
        .usage-info ul, .usage-info ol {
          padding-left: 20px;
        }
        
        .usage-info li {
          margin-bottom: 5px;
        }
        
        @media (max-width: 768px) {
          .config-content {
            grid-template-columns: 1fr;
            gap: 20px;
          }
        }
      `,document.head.appendChild(e))}updateConfigFromForm(){var e=document.getElementById("config-title").value,t=document.getElementById("config-defaultPage").value,o=document.getElementById("config-locales").value.split(",").map(e=>e.trim()).filter(e=>0<e.length),n=document.getElementById("config-showGallery").checked,i=document.getElementById("config-mermaidTheme").value;this.config.title=e,this.config.defaultPage=t,this.config.locales=o,this.config.showGallery=n,this.config.mermaid.theme=i,console.log("üìù Configuration updated:",this.config),document.title=this.config.title,this.updateGeneratedCode(),this.showNotification("‚úÖ Configuration mise √† jour")}updateGeneratedCode(){var e={title:this.config.title,baseUrl:this.config.baseUrl,defaultPage:this.config.defaultPage,locales:this.config.locales,fallbackLocale:this.config.fallbackLocale,showGallery:this.config.showGallery,mermaid:{theme:this.config.mermaid.theme}},e=JSON.stringify(e,null,2).replace(/"/g,"&quot;").replace(/</g,"&lt;").replace(/>/g,"&gt;"),e=`&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;${this.config.title}&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;script src="ontowave.min.js"&gt;&lt;/script&gt;
    &lt;script type="application/json" id="ontowave-config"&gt;
${e}
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;`,t=document.getElementById("generated-html");t&&(t.innerHTML=e)}downloadConfig(){var e={title:this.config.title,baseUrl:this.config.baseUrl,defaultPage:this.config.defaultPage,locales:this.config.locales,fallbackLocale:this.config.fallbackLocale,showGallery:this.config.showGallery,mermaid:{theme:this.config.mermaid.theme}},e=JSON.stringify(e,null,2),e=`<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>${this.config.title}</title>
</head>
<body>
    <script src="ontowave.min.js"></script>
    <script type="application/json" id="ontowave-config">
${e}
    </script>
</body>
</html>`,e=new Blob([e],{type:"text/html"}),e=URL.createObjectURL(e),t=document.createElement("a");t.href=e,t.download="index.html",document.body.appendChild(t),t.click(),document.body.removeChild(t),URL.revokeObjectURL(e),this.showNotification("üíæ Fichier HTML t√©l√©charg√©")}resetConfig(){this.config={...t},this.showConfigurationInterface(),this.showNotification("üîÑ Configuration r√©initialis√©e")}showNotification(e){let t=document.createElement("div");t.style.cssText=`
        position: fixed;
        top: 20px;
        right: 20px;
        background: #28a745;
        color: white;
        padding: 12px 20px;
        border-radius: 6px;
        z-index: 10000;
        font-weight: 600;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        animation: slideIn 0.3s ease;
      `,t.textContent=e,document.getElementById("notification-styles")||((e=document.createElement("style")).id="notification-styles",e.textContent=`
          @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
          }
        `,document.head.appendChild(e)),document.body.appendChild(t),setTimeout(()=>{t.style.animation="slideIn 0.3s ease reverse",setTimeout(()=>{t.parentNode&&t.parentNode.removeChild(t)},300)},3e3)}showError(e){var t=document.getElementById("ontowave-content");t&&(t.innerHTML=`<div class="ontowave-error">‚ùå ${e}</div>`)}toggleConfigurationPanel(o,n=null){o&&(o.preventDefault(),o.stopPropagation());o=n||this.getCurrentLanguage(),console.log("‚öôÔ∏è Opening config panel with locale:",o),n=document.querySelector(".ontowave-menu-content");if(n){var i=document.querySelector('.ontowave-menu-option[onclick*="toggleConfigurationPanel"]');let t=document.getElementById("ontowave-config-panel");if(t){t.remove(),i&&i.classList.remove("selected");let e=document.getElementById("ontowave-floating-menu");e&&e.classList.remove("has-config-panel"),"function"==typeof c.ontowaveUpdateDragState&&c.ontowaveUpdateDragState(),void console.log("Config panel closed")}else{i&&i.classList.add("selected"),(t=document.createElement("div")).id="ontowave-config-panel",t.className="ontowave-config-panel",t.innerHTML=`
        <div class="config-panel-content">
          <div class="config-full-panel">
            <h3>üåä ${this.t("configTitle",o)}</h3>
            
            <!-- Section G√©n√©ral -->
            <div class="config-section">
              <h4>üìñ ${this.t("configGeneral",o)}</h4>
              <div class="config-row">
                <div class="form-group-full">
                  <label for="config-title-full">${this.t("configSiteTitle",o)}</label>
                  <input type="text" id="config-title-full" value="${this.config.title}" />
                </div>
                <div class="form-group-full">
                  <label for="config-defaultPage-full">${this.t("configDefaultPage",o)}</label>
                  <input type="text" id="config-defaultPage-full" value="${this.config.defaultPage}" placeholder="index.md" />
                </div>
              </div>
              <div class="form-group-full">
                <label for="config-baseUrl-full">${this.t("configBaseUrl",o)}</label>
                <input type="text" id="config-baseUrl-full" value="${this.config.baseUrl}" placeholder="/" />
              </div>
            </div>

            <!-- Section Langues et Localisation -->
            <div class="config-section">
              <h4>üåç ${this.t("configLanguages",o)}</h4>
              <div class="config-row">
                <div class="form-group-full">
                  <label for="config-locales-full">${this.t("configSupportedLanguages",o)}</label>
                  <input type="text" id="config-locales-full" value="${this.config.locales.join(", ")}" placeholder="fr-CA, fr, en" />
                  <small>${this.t("configLanguageNote",o)}</small>
                </div>
                <div class="form-group-full">
                  <label for="config-fallbackLocale-full">${this.t("configFallbackLanguage",o)}</label>
                  <select id="config-fallbackLocale-full">
                    <option value="en" ${"en"===this.config.fallbackLocale?"selected":""}>English (en)</option>
                    <option value="fr" ${"fr"===this.config.fallbackLocale?"selected":""}>Fran√ßais (fr)</option>
                    <option value="es" ${"es"===this.config.fallbackLocale?"selected":""}>Espa√±ol (es)</option>
                    <option value="de" ${"de"===this.config.fallbackLocale?"selected":""}>Deutsch (de)</option>
                  </select>
                </div>
              </div>
            </div>

            <!-- Section Navigation et Interface -->
            <div class="config-section">
              <h4>üß≠ ${this.t("configNavigation",o)}</h4>
              <div class="config-row">
                <div class="form-group-checkbox">
                  <label>
                    <input type="checkbox" id="config-showGallery-full" ${this.config.showGallery?"checked":""} />
                    üé® ${this.t("configShowGallery",o)}
                  </label>
                </div>
                <div class="form-group-checkbox">
                  <label>
                    <input type="checkbox" id="config-navHome-full" ${!1!==this.config.navigation?.showHome?"checked":""} />
                    üè† ${this.t("configHomeButton",o)}
                  </label>
                </div>
              </div>
              <div class="config-row">
                <div class="form-group-checkbox">
                  <label>
                    <input type="checkbox" id="config-navBreadcrumb-full" ${!1!==this.config.navigation?.showBreadcrumb?"checked":""} />
                    üìç ${this.t("configBreadcrumb",o)}
                  </label>
                </div>
                <div class="form-group-checkbox">
                  <label>
                    <input type="checkbox" id="config-navToc-full" ${!1!==this.config.navigation?.showToc?"checked":""} />
                    üìë ${this.t("configToc",o)}
                  </label>
                </div>
              </div>
            </div>

            <!-- Section Diagrammes Mermaid -->
            <div class="config-section">
              <h4>üìä ${this.t("configMermaid",o)}</h4>
              <div class="config-row">
                <div class="form-group-full">
                  <label for="config-mermaidTheme-full">${this.t("configMermaidTheme",o)}</label>
                  <select id="config-mermaidTheme-full">
                    <option value="default" ${"default"===this.config.mermaid?.theme?"selected":""}>Default (clair)</option>
                    <option value="dark" ${"dark"===this.config.mermaid?.theme?"selected":""}>Dark (sombre)</option>
                    <option value="forest" ${"forest"===this.config.mermaid?.theme?"selected":""}>Forest (vert)</option>
                    <option value="neutral" ${"neutral"===this.config.mermaid?.theme?"selected":""}>Neutral (neutre)</option>
                  </select>
                </div>
                <div class="form-group-checkbox">
                  <label>
                    <input type="checkbox" id="config-mermaidStart-full" ${!1!==this.config.mermaid?.startOnLoad?"checked":""} />
                    üöÄ ${this.t("configMermaidAuto",o)}
                  </label>
                </div>
              </div>
              <div class="config-row">
                <div class="form-group-checkbox">
                  <label>
                    <input type="checkbox" id="config-mermaidMaxWidth-full" ${!1!==this.config.mermaid?.flowchart?.useMaxWidth?"checked":""} />
                    üìê ${this.t("configMermaidMaxWidth",o)}
                  </label>
                </div>
              </div>
            </div>

            <!-- Section PlantUML -->
            <div class="config-section">
              <h4>üåø ${this.t("configPlantuml",o)}</h4>
              <div class="config-row">
                <div class="form-group-full">
                  <label for="config-plantumlServer-full">${this.t("configPlantumlServer",o)}</label>
                  <input type="text" id="config-plantumlServer-full" value="${this.config.plantuml?.server||"https://www.plantuml.com/plantuml"}" />
                </div>
                <div class="form-group-full">
                  <label for="config-plantumlFormat-full">${this.t("configPlantumlFormat",o)}</label>
                  <select id="config-plantumlFormat-full">
                    <option value="svg" ${"svg"===this.config.plantuml?.format?"selected":""}>SVG (vectoriel)</option>
                    <option value="png" ${"png"===this.config.plantuml?.format?"selected":""}>PNG (bitmap)</option>
                  </select>
                </div>
              </div>
            </div>

            <!-- Section Coloration Syntaxique -->
            <div class="config-section">
              <h4>üé® ${this.t("configPrism",o)}</h4>
              <div class="config-row">
                <div class="form-group-full">
                  <label for="config-prismTheme-full">${this.t("configPrismTheme",o)}</label>
                  <select id="config-prismTheme-full">
                    <option value="default" ${"default"===this.config.prism?.theme?"selected":""}>Default (clair)</option>
                    <option value="dark" ${"dark"===this.config.prism?.theme?"selected":""}>Dark (sombre)</option>
                    <option value="twilight" ${"twilight"===this.config.prism?.theme?"selected":""}>Twilight</option>
                  </select>
                </div>
                <div class="form-group-checkbox">
                  <label>
                    <input type="checkbox" id="config-prismAutoload-full" ${!1!==this.config.prism?.autoload?"checked":""} />
                    üîÑ ${this.t("configPrismAutoload",o)}
                  </label>
                </div>
              </div>
            </div>

            <!-- Section Interface Utilisateur -->
            <div class="config-section">
              <h4>üíª ${this.t("configUI",o)}</h4>
              <div class="config-row">
                <div class="form-group-full">
                  <label for="config-uiTheme-full">${this.t("configUITheme",o)}</label>
                  <select id="config-uiTheme-full">
                    <option value="default" ${"default"===this.config.ui?.theme?"selected":""}>Default (clair)</option>
                    <option value="dark" ${"dark"===this.config.ui?.theme?"selected":""}>Dark (sombre)</option>
                    <option value="auto" ${"auto"===this.config.ui?.theme?"selected":""}>Auto (syst√®me)</option>
                  </select>
                </div>
                <div class="form-group-checkbox">
                  <label>
                    <input type="checkbox" id="config-uiResponsive-full" ${!1!==this.config.ui?.responsive?"checked":""} />
                    üì± ${this.t("configUIResponsive",o)}
                  </label>
                </div>
              </div>
              <div class="config-row">
                <div class="form-group-checkbox">
                  <label>
                    <input type="checkbox" id="config-uiAnimations-full" ${!1!==this.config.ui?.animations?"checked":""} />
                    ‚ú® ${this.t("configUIAnimations",o)}
                  </label>
                </div>
              </div>
            </div>

            <!-- Actions -->
            <div class="form-actions-full">
              <button onclick="window.OntoWave.instance.updateConfigFromFullPanel()" class="btn-primary">‚úÖ ${this.t("configApply",o)}</button>
              <button onclick="window.OntoWave.instance.downloadConfigFromPanel()" class="btn-secondary">üíæ ${this.t("configDownloadHTML",o)}</button>
              <button onclick="window.OntoWave.instance.downloadOntoWaveScript()" class="btn-secondary">üì• ${this.t("configDownloadJS",o)}</button>
              <button onclick="window.OntoWave.instance.resetConfigToDefaults()" class="btn-warning">üîÑ ${this.t("configReset",o)}</button>
            </div>
          </div>
        </div>
      `,this.addConfigPanelStyles(),n.appendChild(t);let e=document.getElementById("ontowave-floating-menu");e&&e.classList.add("has-config-panel"),"function"==typeof c.ontowaveUpdateDragState&&c.ontowaveUpdateDragState(),this.updateGeneratedCodeMini(),console.log("Config panel opened")}}else console.error("Menu content not found")}updateConfigFromFullPanel(){var e=document.getElementById("config-title-full")?.value||this.config.title,t=document.getElementById("config-defaultPage-full")?.value||this.config.defaultPage,o=document.getElementById("config-baseUrl-full")?.value||this.config.baseUrl,n=document.getElementById("config-locales-full")?.value.split(",").map(e=>e.trim()).filter(e=>0<e.length)||this.config.locales,i=document.getElementById("config-fallbackLocale-full")?.value||this.config.fallbackLocale,a=document.getElementById("config-showGallery-full")?.checked||!1,l=!1!==document.getElementById("config-navHome-full")?.checked,r=!1!==document.getElementById("config-navBreadcrumb-full")?.checked,s=!1!==document.getElementById("config-navToc-full")?.checked,c=document.getElementById("config-mermaidTheme-full")?.value||"default",d=!1!==document.getElementById("config-mermaidStart-full")?.checked,g=!1!==document.getElementById("config-mermaidMaxWidth-full")?.checked,m=document.getElementById("config-plantumlServer-full")?.value||"https://www.plantuml.com/plantuml",u=document.getElementById("config-plantumlFormat-full")?.value||"svg",f=document.getElementById("config-prismTheme-full")?.value||"default",p=!1!==document.getElementById("config-prismAutoload-full")?.checked,h=document.getElementById("config-uiTheme-full")?.value||"default",v=!1!==document.getElementById("config-uiResponsive-full")?.checked,b=!1!==document.getElementById("config-uiAnimations-full")?.checked;this.config.title=e,this.config.defaultPage=t,this.config.baseUrl=o,this.config.locales=n,this.config.fallbackLocale=i,this.config.showGallery=a,this.config.navigation={showHome:l,showBreadcrumb:r,showToc:s},this.config.mermaid={theme:c,startOnLoad:d,flowchart:{useMaxWidth:g},sequence:{useMaxWidth:g},gantt:{useMaxWidth:g},journey:{useMaxWidth:g}},this.config.plantuml={server:m,format:u},this.config.prism={theme:f,autoload:p},this.config.ui={theme:h,responsive:v,animations:b},document.title=this.config.title,this.showNotification("Configuration appliqu√©e avec succ√®s ! üéâ"),console.log("Configuration mise √† jour:",this.config)}resetConfigToDefaults(){var e;confirm("Voulez-vous vraiment r√©initialiser toute la configuration aux valeurs par d√©faut ?")&&(Object.assign(this.config,{title:"OntoWave Documentation",baseUrl:"/",defaultPage:"index.md",locales:[],fallbackLocale:"en",showGallery:!1,mermaid:{theme:"default",startOnLoad:!0,flowchart:{useMaxWidth:!0},sequence:{useMaxWidth:!0},gantt:{useMaxWidth:!0},journey:{useMaxWidth:!0}},plantuml:{server:"https://www.plantuml.com/plantuml",format:"svg"},prism:{theme:"default",autoload:!0},navigation:{showHome:!0,showBreadcrumb:!0,showToc:!0},ui:{theme:"default",responsive:!0,animations:!0}}),(e=document.getElementById("ontowave-config-panel"))&&(e.remove(),"function"==typeof c.ontowaveUpdateDragState&&c.ontowaveUpdateDragState(),setTimeout(()=>this.toggleConfigurationPanel(),100)),this.showNotification("Configuration r√©initialis√©e ! üîÑ"))}updateConfigFromPanel(){var e=document.getElementById("config-title-mini")?.value||this.config.title,t=document.getElementById("config-locales-mini")?.value.split(",").map(e=>e.trim()).filter(e=>0<e.length)||this.config.locales,o=document.getElementById("config-showGallery-mini")?.checked||this.config.showGallery;this.config.title=e,this.config.locales=t,this.config.showGallery=o,document.title=this.config.title,this.updateGeneratedCodeMini(),this.showNotification("‚úÖ Configuration mise √† jour")}downloadConfigFromPanel(){var e={title:this.config.title,baseUrl:this.config.baseUrl,defaultPage:this.config.defaultPage,locales:this.config.locales,fallbackLocale:this.config.fallbackLocale,showGallery:this.config.showGallery,mermaid:{theme:this.config.mermaid.theme}},e=JSON.stringify(e,null,2),e=`<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>${this.config.title}</title>
</head>
<body>
    <script src="ontowave.min.js"></script>
    <script type="application/json" id="ontowave-config">
${e}
    </script>
</body>
</html>`,e=new Blob([e],{type:"text/html"}),e=URL.createObjectURL(e),t=document.createElement("a");t.href=e,t.download="index.html",document.body.appendChild(t),t.click(),document.body.removeChild(t),URL.revokeObjectURL(e),this.showNotification("üíæ Fichier HTML t√©l√©charg√©")}downloadOntoWaveScript(){var e=document.createElement("a");e.href="ontowave.min.js",e.download="ontowave.min.js",document.body.appendChild(e),e.click(),document.body.removeChild(e),this.showNotification("üì• Fichier ontowave.min.js t√©l√©charg√©")}updateGeneratedCodeMini(){var e={title:this.config.title,baseUrl:this.config.baseUrl,defaultPage:this.config.defaultPage,locales:this.config.locales,fallbackLocale:this.config.fallbackLocale,showGallery:this.config.showGallery,mermaid:{theme:this.config.mermaid.theme}},e=JSON.stringify(e,null,2).replace(/"/g,"&quot;").replace(/</g,"&lt;").replace(/>/g,"&gt;"),e=`&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;${this.config.title}&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;script src="ontowave.min.js"&gt;&lt;/script&gt;
    &lt;script type="application/json" id="ontowave-config"&gt;
${e}
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;`,t=document.getElementById("generated-html-mini");t&&(t.innerHTML=e)}addConfigPanelStyles(){var e;document.getElementById("ontowave-config-panel-styles")||((e=document.createElement("style")).id="ontowave-config-panel-styles",e.textContent=`
        /* Panneau de configuration √©tendu */
        .ontowave-config-panel {
          position: absolute;
          top: 100%;
          left: 0;
          right: 0;
          background: white;
          border: 1px solid #e1e4e8;
          border-radius: 12px;
          box-shadow: 0 16px 48px rgba(0,0,0,0.15);
          z-index: 1001;
          margin-top: 12px;
          max-height: 90vh;
          overflow-y: auto;
          min-width: 90vw;
          max-width: 95vw;
          width: auto;
        }
        
        .config-panel-content {
          padding: 0;
        }
        
        .config-full-panel {
          padding: 32px;
          max-width: none;
        }
        
        .config-full-panel h3 {
          margin: 0 0 32px 0;
          color: #0969da;
          font-size: 24px;
          font-weight: 700;
          text-align: center;
          padding-bottom: 16px;
          border-bottom: 2px solid #f6f8fa;
        }
        
        /* Sections de configuration */
        .config-section {
          margin-bottom: 32px;
          padding: 24px;
          background: #f6f8fa;
          border-radius: 8px;
          border-left: 4px solid #0969da;
        }
        
        .config-section h4 {
          margin: 0 0 20px 0;
          color: #24292e;
          font-size: 18px;
          font-weight: 600;
          display: flex;
          align-items: center;
          gap: 8px;
        }
        
        /* Disposition en lignes */
        .config-row {
          display: grid;
          grid-template-columns: 1fr 1fr;
          gap: 20px;
          margin-bottom: 16px;
        }
        
        .config-row:last-child {
          margin-bottom: 0;
        }
        
        /* Groupes de formulaire */
        .form-group-full {
          margin-bottom: 0;
        }
        
        .form-group-full label {
          display: block;
          font-weight: 600;
          margin-bottom: 8px;
          color: #24292e;
          font-size: 14px;
        }
        
        .form-group-full input,
        .form-group-full select {
          width: 100%;
          padding: 12px;
          border: 2px solid #d0d7de;
          border-radius: 6px;
          font-size: 14px;
          transition: border-color 0.2s ease;
        }
        
        .form-group-full input:focus,
        .form-group-full select:focus {
          outline: none;
          border-color: #0969da;
          box-shadow: 0 0 0 3px rgba(9, 105, 218, 0.1);
        }
        
        .form-group-full small {
          display: block;
          margin-top: 4px;
          font-size: 12px;
          color: #656d76;
          font-style: italic;
        }
        
        /* Checkboxes */
        .form-group-checkbox {
          display: flex;
          align-items: center;
          margin-bottom: 0;
        }
        
        .form-group-checkbox label {
          display: flex;
          align-items: center;
          font-weight: 500;
          color: #24292e;
          font-size: 14px;
          cursor: pointer;
          margin: 0;
        }
        
        .form-group-checkbox input[type="checkbox"] {
          width: auto;
          margin: 0 8px 0 0;
          transform: scale(1.2);
          accent-color: #0969da;
        }
        
        /* Actions du formulaire */
        .form-actions-full {
          display: flex;
          gap: 16px;
          justify-content: center;
          margin-top: 40px;
          padding-top: 24px;
          border-top: 2px solid #f6f8fa;
          flex-wrap: wrap;
        }
        
        .form-actions-full button {
          padding: 12px 24px;
          border: none;
          border-radius: 8px;
          font-size: 14px;
          font-weight: 600;
          cursor: pointer;
          transition: all 0.2s ease;
          min-width: 180px;
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 8px;
        }
        
        .btn-primary {
          background: #0969da;
          color: white;
        }
        
        .btn-primary:hover {
          background: #0550ae;
          transform: translateY(-1px);
          box-shadow: 0 4px 12px rgba(9, 105, 218, 0.3);
        }
        
        .btn-secondary {
          background: #6f7782;
          color: white;
        }
        
        .btn-secondary:hover {
          background: #57606a;
          transform: translateY(-1px);
          box-shadow: 0 4px 12px rgba(111, 119, 130, 0.3);
        }
        
        .btn-warning {
          background: #d73a49;
          color: white;
        }
        
        .btn-warning:hover {
          background: #b31d28;
          transform: translateY(-1px);
          box-shadow: 0 4px 12px rgba(215, 58, 73, 0.3);
        }
        
        /* Responsive pour petits √©crans */
        @media (max-width: 768px) {
          .ontowave-config-panel {
            min-width: 95vw;
            margin-top: 8px;
          }
          
          .config-full-panel {
            padding: 20px;
          }
          
          .config-row {
            grid-template-columns: 1fr;
            gap: 16px;
          }
          
          .form-actions-full {
            flex-direction: column;
            align-items: stretch;
          }
          
          .form-actions-full button {
            min-width: auto;
          }
        }
        
        /* Styles pour compatibilit√© avec l'ancien panneau compact */
        .config-form-compact h3,
        .config-preview-compact h3 {
          margin: 0 0 16px 0;
          color: #0969da;
          font-size: 16px;
          font-weight: 600;
        }
        
        .form-group-compact {
          margin-bottom: 16px;
        }
        
        .form-group-compact label {
          display: block;
          font-weight: 600;
          margin-bottom: 6px;
          color: #24292e;
          font-size: 13px;
        }
        
        .form-group-compact input {
          width: 100%;
          padding: 8px;
          border: 1px solid #d0d7de;
          border-radius: 4px;
          font-size: 13px;
        }
        
        .form-group-compact input[type="checkbox"] {
          width: auto;
          margin-right: 6px;
        }
        
        .form-actions-compact {
          display: flex;
          gap: 10px;
          margin-top: 20px;
          flex-wrap: wrap;
        }
        
        .form-actions-compact button {
          flex: 1;
          padding: 10px 16px;
          border: none;
          border-radius: 6px;
          background: #0969da;
          color: white;
          font-size: 13px;
          font-weight: 600;
          cursor: pointer;
          transition: background 0.2s ease;
          min-width: 120px;
        }
        
        .form-actions-compact button:hover {
          background: #0550ae;
        }
        
        .config-preview-compact {
          background: #f6f8fa;
          border-radius: 6px;
          padding: 16px;
        }
        
        .code-preview-mini {
          background: #24292e;
          color: #f6f8fa;
          padding: 12px;
          border-radius: 4px;
          font-family: 'SF Mono', Consolas, 'Liberation Mono', Menlo, monospace;
          font-size: 11px;
          line-height: 1.4;
          overflow-x: auto;
          max-height: 300px;
          overflow-y: auto;
        }
      `,document.head.appendChild(e))}navigate(e){this.loadPage(e)}getConfig(){return{...this.config}}updateConfig(e){this.config={...this.config,...e},console.log("üìù Configuration updated")}}async function i(){try{var e,t=await fetch("./config.json");if(t.ok)return e=await t.json(),console.log("üìÅ Configuration charg√©e depuis config.json:",e),e}catch(e){console.log("üìÅ Pas de config.json trouv√©, utilisation de la configuration par d√©faut")}return{}}document.addEventListener("DOMContentLoaded",async()=>{let e=c.OntoWaveConfig||{};e=c.OntoWaveConfig?{...await i(),...c.OntoWaveConfig}:await i(),c.OntoWave={instance:new n(e)},await c.OntoWave.instance.init(),console.log("üåä OntoWave initialis√© automatiquement")}),c.OntoWaveClass=n})(window);